{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "967e2409",
   "metadata": {
    "papermill": {
     "duration": 0.007362,
     "end_time": "2022-12-06T15:35:55.380791",
     "exception": false,
     "start_time": "2022-12-06T15:35:55.373429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Mx_Coculture: Correction\n",
    "\n",
    "SpaceM datasets are usually stored as annotated data-matrices, separately for individual wells. With this notebooks, these individual files are corrected for ion suppression on the pixel-level and then deconvoluted to cell-level. All resulting files are saved separately by well to the target_path and the impact of the correction briefly shown for visual inspection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b08a1b84",
   "metadata": {
    "papermill": {
     "duration": 4.316287,
     "end_time": "2022-12-06T15:35:59.702814",
     "exception": false,
     "start_time": "2022-12-06T15:35:55.386527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import platform\n",
    "import scanpy as sc\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import anndata as ad\n",
    "import statistics as st\n",
    "import multiprocessing\n",
    "from joblib import Parallel, delayed\n",
    "from tqdm import tqdm\n",
    "import statsmodels.formula.api as smf\n",
    "import seaborn as sns\n",
    "import re\n",
    "from importlib import reload\n",
    "import json\n",
    "import sys\n",
    "sys.path.append('/home/mklein/spacem')\n",
    "sys.path.append('/home/mklein/FDA_project')\n",
    "\n",
    "from src.correction import (add_normalization_factors, \n",
    "                            correct_quantile_inplace,\n",
    "                            deconvolution_spacem,\n",
    "                            get_overlap_data,\n",
    "                            add_overlap_matrix_spacem\n",
    "                           )\n",
    "from src import const \n",
    "from SpaceM.lib.modules import (\n",
    "    overlap_analysis,\n",
    "    single_cell_analysis_normalization\n",
    ")\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2be86b0",
   "metadata": {
    "papermill": {
     "duration": 0.006872,
     "end_time": "2022-12-06T15:35:59.718067",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.711195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The original data lies on the groups shared data storage. Corrected files will be saved in a separate location, preserving the well-specific folder structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95750978",
   "metadata": {
    "papermill": {
     "duration": 0.019014,
     "end_time": "2022-12-06T15:35:59.743412",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.724398",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "if platform.system() == \"Darwin\":\n",
    "    source_path = '/Volumes/alexandr/smenon/2022-07-13_Glioblastoma/processed_files'\n",
    "    target_path = '/Volumes/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "else:\n",
    "    source_path = '/g/alexandr/smenon/2022-07-13_Glioblastoma/processed_files'\n",
    "    target_path = '/home/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "    \n",
    "# TODO: implement topX reference ion pool.\n",
    "reference_pool = {'top': 10}\n",
    "deconv_default_min_overlap = 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d3cdc205",
   "metadata": {
    "papermill": {
     "duration": 0.017111,
     "end_time": "2022-12-06T15:35:59.766973",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.749862",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "source_path = \"/home/mklein/Raw Data/Coculture\"\n",
    "target_path = \"/home/mklein/FDA_project/data/Mx_Co_Cultured\"\n",
    "condition_name = \"condition\"\n",
    "well_name = \"rowcol\"\n",
    "deconv_default_min_overlap = 0.3\n",
    "analysis_path = \"/home/mklein/FDA_project/analysis/Mx_Coculture\"\n",
    "notebooks = [\n",
    "    \"pipeline_01_correction.ipynb\",\n",
    "    \"pipeline_02_processing.ipynb\",\n",
    "    \"pipeline_03_evaluation.ipynb\",\n",
    "]\n",
    "project = \"Mx_Coculture\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0d9a5db",
   "metadata": {
    "papermill": {
     "duration": 0.023525,
     "end_time": "2022-12-06T15:35:59.796878",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.773353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['dataset']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "samples = []\n",
    "for dirpath, dirnames, filenames in os.walk(source_path):\n",
    "        if 'analysis' in dirnames:\n",
    "            samples.append(re.sub(source_path+'/?', '', dirpath))\n",
    "samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "375d06df",
   "metadata": {
    "papermill": {
     "duration": 0.015021,
     "end_time": "2022-12-06T15:35:59.817985",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.802964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "files = {\n",
    "        'config': '../config.json',\n",
    "        'sm_matrix': 'ablation_mark_analysis/spatiomolecular_adata.h5ad',\n",
    "        'overlap_regions': 'overlap_analysis2/overlap.regions.csv',\n",
    "        'mark_regions': 'overlap_analysis2/ablation_mark.regions.csv',\n",
    "        'cell_regions': 'overlap_analysis2/cell.regions.csv',\n",
    "        'cell_sm_matrix': 'single_cell_analysis/spatiomolecular_adata.h5ad',\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "19c81ab5",
   "metadata": {
    "papermill": {
     "duration": 0.018799,
     "end_time": "2022-12-06T15:35:59.842699",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.823900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def assign_average_tpo(am_adata, overlap_data, min_overlap, method=np.mean):\n",
    "    if min_overlap is None:\n",
    "        min_overlap = 0\n",
    "    \n",
    "    overlap = overlap_data.overlap_regions\n",
    "    overlap['am_id'] = overlap['am_id'].astype(str)\n",
    "    overlap['cell_id'] = overlap['cell_id'].astype(str)\n",
    "    merged_df = pd.merge(overlap[['am_id', 'cell_id']], am_adata.obs[const.TPO], left_on='am_id', right_index=True)\n",
    "    merged_df = merged_df[merged_df[const.TPO] >= min_overlap]\n",
    "    \n",
    "    mean_df = merged_df[['cell_id', 'correction_total_pixel_overlap']].groupby('cell_id', group_keys=False).agg(method)\n",
    "#     mean_df = merged_df[['cell_id', 'correction_total_pixel_overlap']].groupby('cell_id', group_keys=False).agg(lambda x: method(x))\n",
    "    return mean_df[const.TPO]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1b3db67",
   "metadata": {
    "papermill": {
     "duration": 0.025348,
     "end_time": "2022-12-06T15:35:59.873847",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.848499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def correct_sample_spacem(sample):\n",
    "    \n",
    "    sample_path = os.path.join(source_path, sample, \"analysis\")\n",
    "    sample = re.sub('/', '_', sample)\n",
    "    \n",
    "    if not os.path.exists(os.path.join(target_path, sample)):\n",
    "        os.makedirs(os.path.join(target_path, sample))\n",
    "\n",
    "    # get appropriate file paths for the processed well\n",
    "    project_files = {k: os.path.join(sample_path, v) for k, v in files.items()}\n",
    "\n",
    "    if os.path.exists(project_files['config']):\n",
    "        with open(project_files['config']) as json_file:\n",
    "            data = json.load(json_file)\n",
    "        deconv_info = data['single_cell_analysis']\n",
    "        if deconv_info['ablation_marks_min_overlap_ratio'] is None:\n",
    "            deconv_info['ablation_marks_min_overlap_ratio'] = deconv_default_min_overlap\n",
    "    else:\n",
    "        deconv_info = {'cell_normalization_method': 'weighted_by_overlap_and_sampling_area', \n",
    "                       'ablation_marks_min_overlap_ratio': 0\n",
    "        }\n",
    "        print('No well config file found. Using default deconvolution parameters.')\n",
    "    # load required files\n",
    "    cell_regions = pd.read_csv(project_files['cell_regions'])\n",
    "    mark_regions = pd.read_csv(project_files['mark_regions'])\n",
    "    overlap_regions = pd.read_csv(project_files['overlap_regions'])\n",
    "    \n",
    "    sm_matrix = sc.read(os.path.join(sample_path, files['sm_matrix']))\n",
    "    cell_sm_matrix = sc.read(os.path.join(sample_path, files['cell_sm_matrix']))\n",
    "       \n",
    "    \n",
    "    add_overlap_matrix_spacem(sm_matrix, cell_regions, mark_regions, overlap_regions)\n",
    "    add_normalization_factors(adata=sm_matrix, method=st.median)\n",
    "        \n",
    "    # perform the actual quantile regression\n",
    "    corr_sm_matrix = correct_quantile_inplace(adata=sm_matrix, \n",
    "        reference_ions=sm_matrix.var_names, \n",
    "        correct_intersect = True,\n",
    "        n_jobs=5)\n",
    "    \n",
    "    # perform pixel-cell-deconvolution\n",
    "    overlap_data = get_overlap_data(cell_regions, mark_regions, overlap_regions)\n",
    "    # corr_cell_sm_matrix = deconvolution_spacem(adata=corr_sm_matrix, \n",
    "    #     overlap_data=overlap_data,\n",
    "    #     raw_adata=cell_sm_matrix,\n",
    "    #     deconvolution_params=deconv_info)\n",
    "    # gen_cell_sm_matrix = deconvolution_spacem(adata=sm_matrix,\n",
    "    #     overlap_data=overlap_data,\n",
    "    #     raw_adata=cell_sm_matrix,\n",
    "    #     deconvolution_params=deconv_info)\n",
    "    \n",
    "    from src.correction import deconvolution_rappez, get_matrices_from_dfs, add_matrices\n",
    "    overlap_matrix, sampling_spec_matrix = get_matrices_from_dfs(mark_area=mark_regions, cell_area=cell_regions, marks_cell_overlap=overlap_regions)\n",
    "    add_matrices(adata = sm_matrix, overlap_matrix = overlap_matrix, sampling_spec_matrix = sampling_spec_matrix)\n",
    "    add_matrices(adata = corr_sm_matrix, overlap_matrix = overlap_matrix, sampling_spec_matrix = sampling_spec_matrix)\n",
    "    \n",
    "    gen_cell_sm_matrix = deconvolution_rappez(sm_matrix, raw_adata=cell_sm_matrix)\n",
    "    corr_cell_sm_matrix = deconvolution_rappez(corr_sm_matrix, raw_adata=cell_sm_matrix)\n",
    "\n",
    "    # hand over TPOs to spatiomolecular matrix for downstream analysis\n",
    "    min_overlap = deconv_info['ablation_marks_min_overlap_ratio']\n",
    "    corr_cell_sm_matrix.obs['list_TPO'] = assign_average_tpo(sm_matrix, overlap_data, min_overlap, method=lambda x: \";\".join(x.astype(str)))\n",
    "    gen_cell_sm_matrix.obs['list_TPO'] = assign_average_tpo(sm_matrix, overlap_data, min_overlap, method=lambda x: \";\".join(x.astype(str)))\n",
    "    \n",
    "    # write the generated files to the dedicated project location.\n",
    "    corr_sm_matrix.write(os.path.join(target_path, sample, 'am_spatiomolecular_adata_corrected.h5ad'))\n",
    "    sm_matrix.write(os.path.join(target_path, sample, 'am_spatiomolecular_adata.h5ad'))\n",
    "    corr_cell_sm_matrix.write(os.path.join(target_path, sample, 'cells_spatiomolecular_adata_corrected.h5ad'))\n",
    "    cell_sm_matrix.write(os.path.join(target_path, sample, 'cells_spatiomolecular_adata_spacem.h5ad'))\n",
    "    gen_cell_sm_matrix.write(os.path.join(target_path, sample, 'cells_spatiomolecular_adata.h5ad'))\n",
    "    #               deconv using own implementation                                                  deconv by Martijn\n",
    "    return (sample, gen_cell_sm_matrix, corr_cell_sm_matrix, sm_matrix, corr_sm_matrix, deconv_info, cell_sm_matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d7433e1",
   "metadata": {
    "papermill": {
     "duration": 0.005724,
     "end_time": "2022-12-06T15:35:59.885105",
     "exception": false,
     "start_time": "2022-12-06T15:35:59.879381",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is the actual correction pipeline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c9d76fc",
   "metadata": {
    "papermill": {
     "duration": 5.863652,
     "end_time": "2022-12-06T15:36:05.754419",
     "exception": true,
     "start_time": "2022-12-06T15:35:59.890767",
     "status": "failed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No well config file found. Using default deconvolution parameters.\n",
      "Using 115 pixels to calculate full-pixel avereage intensities.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mklein/.conda/envs/ion_suppression/lib/python3.10/site-packages/statsmodels/regression/quantile_regression.py:191: IterationLimitWarning: Maximum number of iterations (1000) reached.\n",
      "  warnings.warn(\"Maximum number of iterations (\" + str(max_iter) +\n",
      "100%|██████████| 1/1 [00:15<00:00, 15.10s/it]\n"
     ]
    }
   ],
   "source": [
    "# adata_list = Parallel(n_jobs=7)(delayed(correct_sample_spacem)(sample) for sample in tqdm(samples))\n",
    "adata_list = [correct_sample_spacem(sample) for sample in tqdm(['dataset'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a46b6863",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ablation_marks_min_overlap_ratio</th>\n",
       "      <th>cell_normalization_method</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dataset</th>\n",
       "      <td>0</td>\n",
       "      <td>weighted_by_overlap_and_sampling_area</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ablation_marks_min_overlap_ratio  \\\n",
       "dataset                                0   \n",
       "\n",
       "                     cell_normalization_method  \n",
       "dataset  weighted_by_overlap_and_sampling_area  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reshape data for immediate analysis\n",
    "gen_adata_dict = {item[0]: item[1] for item in adata_list}\n",
    "adata_cor_dict = {item[0]: item[2] for item in adata_list}\n",
    "am_adata_dict = {item[0]: item[3] for item in adata_list}\n",
    "am_adata_cor_dict = {item[0]: item[4] for item in adata_list}\n",
    "adata_dict = {item[0]: item[6] for item in adata_list}\n",
    "\n",
    "am_adata = ad.concat(am_adata_dict, label='well', index_unique=\"_\", merge=\"first\")\n",
    "am_adata_cor = ad.concat(am_adata_cor_dict, label='well', index_unique=\"_\", merge='first')\n",
    "gen_adata = ad.concat(gen_adata_dict, label='well', index_unique=\"_\", merge=\"first\")\n",
    "adata = ad.concat(adata_dict, label='well', index_unique=\"_\", merge=\"first\")\n",
    "adata_cor = ad.concat(adata_cor_dict, label='well', index_unique=\"_\", merge=\"first\")\n",
    "\n",
    "deconv_dict = {item[0]: item[5] for item in adata_list}\n",
    "deconv_table = pd.DataFrame(deconv_dict).T\n",
    "deconv_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1cf7e9f2-ce74-4747-9164-e96985b452b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C16H30O2</th>\n",
       "      <th>C18H34O2</th>\n",
       "      <th>C18H36O2</th>\n",
       "      <th>C19H37O6P</th>\n",
       "      <th>C19H39O7P</th>\n",
       "      <th>C20H32O2</th>\n",
       "      <th>C21H39O6P</th>\n",
       "      <th>C21H41O6P</th>\n",
       "      <th>C21H41O7P</th>\n",
       "      <th>C21H43O7P</th>\n",
       "      <th>...</th>\n",
       "      <th>C43H81O13P</th>\n",
       "      <th>C43H82NO8P</th>\n",
       "      <th>C44H78NO10P</th>\n",
       "      <th>C44H84NO6P</th>\n",
       "      <th>C45H78NO8P</th>\n",
       "      <th>C45H80NO8P</th>\n",
       "      <th>C45H82NO8P</th>\n",
       "      <th>C6H11O8P</th>\n",
       "      <th>C6H13O9P</th>\n",
       "      <th>C9H19O11P</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11_dataset</th>\n",
       "      <td>265.808380</td>\n",
       "      <td>489.958191</td>\n",
       "      <td>870.396118</td>\n",
       "      <td>1267.842773</td>\n",
       "      <td>313.799561</td>\n",
       "      <td>560.955872</td>\n",
       "      <td>607.017639</td>\n",
       "      <td>878.772949</td>\n",
       "      <td>291.287598</td>\n",
       "      <td>113.102257</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.192223</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1625.245728</td>\n",
       "      <td>1010.626160</td>\n",
       "      <td>73.307541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13_dataset</th>\n",
       "      <td>296.734802</td>\n",
       "      <td>567.777405</td>\n",
       "      <td>1188.540527</td>\n",
       "      <td>1355.586060</td>\n",
       "      <td>373.475739</td>\n",
       "      <td>551.219971</td>\n",
       "      <td>566.847900</td>\n",
       "      <td>1464.341797</td>\n",
       "      <td>240.569626</td>\n",
       "      <td>322.036469</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>49.781700</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>85.142654</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1462.990723</td>\n",
       "      <td>991.393677</td>\n",
       "      <td>36.423725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14_dataset</th>\n",
       "      <td>472.557617</td>\n",
       "      <td>836.537109</td>\n",
       "      <td>2210.934570</td>\n",
       "      <td>2427.729248</td>\n",
       "      <td>257.828308</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3108.314453</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>779.176758</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4024.967285</td>\n",
       "      <td>2035.756592</td>\n",
       "      <td>254.250992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15_dataset</th>\n",
       "      <td>323.413422</td>\n",
       "      <td>653.158752</td>\n",
       "      <td>1518.866943</td>\n",
       "      <td>1503.450806</td>\n",
       "      <td>446.733917</td>\n",
       "      <td>537.969666</td>\n",
       "      <td>541.970642</td>\n",
       "      <td>2120.899170</td>\n",
       "      <td>208.978683</td>\n",
       "      <td>547.869751</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>161.531281</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1369.842529</td>\n",
       "      <td>990.259155</td>\n",
       "      <td>7.437679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16_dataset</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1500_dataset</th>\n",
       "      <td>419.832336</td>\n",
       "      <td>1044.673462</td>\n",
       "      <td>746.581848</td>\n",
       "      <td>2030.083374</td>\n",
       "      <td>397.532135</td>\n",
       "      <td>818.660095</td>\n",
       "      <td>996.638916</td>\n",
       "      <td>1566.342407</td>\n",
       "      <td>580.304077</td>\n",
       "      <td>440.725861</td>\n",
       "      <td>...</td>\n",
       "      <td>517.587402</td>\n",
       "      <td>21.608255</td>\n",
       "      <td>16.667500</td>\n",
       "      <td>102.692436</td>\n",
       "      <td>60.929401</td>\n",
       "      <td>120.688744</td>\n",
       "      <td>40.213131</td>\n",
       "      <td>3152.038574</td>\n",
       "      <td>2016.633667</td>\n",
       "      <td>166.406586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1503_dataset</th>\n",
       "      <td>388.004944</td>\n",
       "      <td>1123.517944</td>\n",
       "      <td>1243.234619</td>\n",
       "      <td>2732.945801</td>\n",
       "      <td>608.264099</td>\n",
       "      <td>795.269104</td>\n",
       "      <td>1123.424561</td>\n",
       "      <td>2087.974609</td>\n",
       "      <td>577.671875</td>\n",
       "      <td>678.929993</td>\n",
       "      <td>...</td>\n",
       "      <td>528.453918</td>\n",
       "      <td>238.451447</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>20.251163</td>\n",
       "      <td>116.953613</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3778.147217</td>\n",
       "      <td>2027.692017</td>\n",
       "      <td>156.318161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1510_dataset</th>\n",
       "      <td>537.635254</td>\n",
       "      <td>2135.785645</td>\n",
       "      <td>1632.460327</td>\n",
       "      <td>2615.274902</td>\n",
       "      <td>542.671692</td>\n",
       "      <td>2053.239746</td>\n",
       "      <td>2234.056152</td>\n",
       "      <td>2418.620850</td>\n",
       "      <td>1060.872192</td>\n",
       "      <td>484.894318</td>\n",
       "      <td>...</td>\n",
       "      <td>1887.967529</td>\n",
       "      <td>518.221313</td>\n",
       "      <td>322.852539</td>\n",
       "      <td>372.113678</td>\n",
       "      <td>184.746338</td>\n",
       "      <td>134.135086</td>\n",
       "      <td>403.948853</td>\n",
       "      <td>7431.572266</td>\n",
       "      <td>3101.317139</td>\n",
       "      <td>669.905701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1512_dataset</th>\n",
       "      <td>522.827026</td>\n",
       "      <td>1995.338135</td>\n",
       "      <td>1519.754272</td>\n",
       "      <td>2547.955322</td>\n",
       "      <td>524.763977</td>\n",
       "      <td>1905.085815</td>\n",
       "      <td>2083.198730</td>\n",
       "      <td>2313.430908</td>\n",
       "      <td>1007.449951</td>\n",
       "      <td>480.965637</td>\n",
       "      <td>...</td>\n",
       "      <td>1729.544800</td>\n",
       "      <td>459.858521</td>\n",
       "      <td>286.492462</td>\n",
       "      <td>338.856934</td>\n",
       "      <td>163.939957</td>\n",
       "      <td>128.241074</td>\n",
       "      <td>358.455597</td>\n",
       "      <td>6952.017090</td>\n",
       "      <td>2990.983887</td>\n",
       "      <td>609.175781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1528_dataset</th>\n",
       "      <td>537.635254</td>\n",
       "      <td>2135.785645</td>\n",
       "      <td>1632.460327</td>\n",
       "      <td>2615.274902</td>\n",
       "      <td>542.671692</td>\n",
       "      <td>2053.239746</td>\n",
       "      <td>2234.056152</td>\n",
       "      <td>2418.620850</td>\n",
       "      <td>1060.872192</td>\n",
       "      <td>484.894318</td>\n",
       "      <td>...</td>\n",
       "      <td>1887.967529</td>\n",
       "      <td>518.221313</td>\n",
       "      <td>322.852539</td>\n",
       "      <td>372.113678</td>\n",
       "      <td>184.746338</td>\n",
       "      <td>134.135086</td>\n",
       "      <td>403.948853</td>\n",
       "      <td>7431.572266</td>\n",
       "      <td>3101.317139</td>\n",
       "      <td>669.905701</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1207 rows × 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                C16H30O2     C18H34O2     C18H36O2    C19H37O6P   C19H39O7P  \\\n",
       "11_dataset    265.808380   489.958191   870.396118  1267.842773  313.799561   \n",
       "13_dataset    296.734802   567.777405  1188.540527  1355.586060  373.475739   \n",
       "14_dataset    472.557617   836.537109  2210.934570  2427.729248  257.828308   \n",
       "15_dataset    323.413422   653.158752  1518.866943  1503.450806  446.733917   \n",
       "16_dataset      0.000000     0.000000     0.000000     0.000000    0.000000   \n",
       "...                  ...          ...          ...          ...         ...   \n",
       "1500_dataset  419.832336  1044.673462   746.581848  2030.083374  397.532135   \n",
       "1503_dataset  388.004944  1123.517944  1243.234619  2732.945801  608.264099   \n",
       "1510_dataset  537.635254  2135.785645  1632.460327  2615.274902  542.671692   \n",
       "1512_dataset  522.827026  1995.338135  1519.754272  2547.955322  524.763977   \n",
       "1528_dataset  537.635254  2135.785645  1632.460327  2615.274902  542.671692   \n",
       "\n",
       "                 C20H32O2    C21H39O6P    C21H41O6P    C21H41O7P   C21H43O7P  \\\n",
       "11_dataset     560.955872   607.017639   878.772949   291.287598  113.102257   \n",
       "13_dataset     551.219971   566.847900  1464.341797   240.569626  322.036469   \n",
       "14_dataset       0.000000     0.000000  3108.314453     0.000000  779.176758   \n",
       "15_dataset     537.969666   541.970642  2120.899170   208.978683  547.869751   \n",
       "16_dataset       0.000000     0.000000     0.000000     0.000000    0.000000   \n",
       "...                   ...          ...          ...          ...         ...   \n",
       "1500_dataset   818.660095   996.638916  1566.342407   580.304077  440.725861   \n",
       "1503_dataset   795.269104  1123.424561  2087.974609   577.671875  678.929993   \n",
       "1510_dataset  2053.239746  2234.056152  2418.620850  1060.872192  484.894318   \n",
       "1512_dataset  1905.085815  2083.198730  2313.430908  1007.449951  480.965637   \n",
       "1528_dataset  2053.239746  2234.056152  2418.620850  1060.872192  484.894318   \n",
       "\n",
       "              ...   C43H81O13P  C43H82NO8P  C44H78NO10P  C44H84NO6P  \\\n",
       "11_dataset    ...     0.000000  100.192223     0.000000    0.000000   \n",
       "13_dataset    ...     0.000000   49.781700     0.000000    0.000000   \n",
       "14_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "15_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "16_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "...           ...          ...         ...          ...         ...   \n",
       "1500_dataset  ...   517.587402   21.608255    16.667500  102.692436   \n",
       "1503_dataset  ...   528.453918  238.451447     0.000000    0.000000   \n",
       "1510_dataset  ...  1887.967529  518.221313   322.852539  372.113678   \n",
       "1512_dataset  ...  1729.544800  459.858521   286.492462  338.856934   \n",
       "1528_dataset  ...  1887.967529  518.221313   322.852539  372.113678   \n",
       "\n",
       "              C45H78NO8P  C45H80NO8P  C45H82NO8P     C6H11O8P     C6H13O9P  \\\n",
       "11_dataset      0.000000    0.000000    0.000000  1625.245728  1010.626160   \n",
       "13_dataset      0.000000   85.142654    0.000000  1462.990723   991.393677   \n",
       "14_dataset      0.000000    0.000000    0.000000  4024.967285  2035.756592   \n",
       "15_dataset      0.000000  161.531281    0.000000  1369.842529   990.259155   \n",
       "16_dataset      0.000000    0.000000    0.000000     0.000000     0.000000   \n",
       "...                  ...         ...         ...          ...          ...   \n",
       "1500_dataset   60.929401  120.688744   40.213131  3152.038574  2016.633667   \n",
       "1503_dataset   20.251163  116.953613    0.000000  3778.147217  2027.692017   \n",
       "1510_dataset  184.746338  134.135086  403.948853  7431.572266  3101.317139   \n",
       "1512_dataset  163.939957  128.241074  358.455597  6952.017090  2990.983887   \n",
       "1528_dataset  184.746338  134.135086  403.948853  7431.572266  3101.317139   \n",
       "\n",
       "               C9H19O11P  \n",
       "11_dataset     73.307541  \n",
       "13_dataset     36.423725  \n",
       "14_dataset    254.250992  \n",
       "15_dataset      7.437679  \n",
       "16_dataset      0.000000  \n",
       "...                  ...  \n",
       "1500_dataset  166.406586  \n",
       "1503_dataset  156.318161  \n",
       "1510_dataset  669.905701  \n",
       "1512_dataset  609.175781  \n",
       "1528_dataset  669.905701  \n",
       "\n",
       "[1207 rows x 58 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gen_adata.to_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1bbde6d8-157c-4603-b6c2-d41582c57a95",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C16H30O2</th>\n",
       "      <th>C18H34O2</th>\n",
       "      <th>C18H36O2</th>\n",
       "      <th>C19H37O6P</th>\n",
       "      <th>C19H39O7P</th>\n",
       "      <th>C20H32O2</th>\n",
       "      <th>C21H39O6P</th>\n",
       "      <th>C21H41O6P</th>\n",
       "      <th>C21H41O7P</th>\n",
       "      <th>C21H43O7P</th>\n",
       "      <th>...</th>\n",
       "      <th>C43H81O13P</th>\n",
       "      <th>C43H82NO8P</th>\n",
       "      <th>C44H78NO10P</th>\n",
       "      <th>C44H84NO6P</th>\n",
       "      <th>C45H78NO8P</th>\n",
       "      <th>C45H80NO8P</th>\n",
       "      <th>C45H82NO8P</th>\n",
       "      <th>C6H11O8P</th>\n",
       "      <th>C6H13O9P</th>\n",
       "      <th>C9H19O11P</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11_dataset</th>\n",
       "      <td>265.808388</td>\n",
       "      <td>489.958201</td>\n",
       "      <td>870.396125</td>\n",
       "      <td>1267.842768</td>\n",
       "      <td>313.799574</td>\n",
       "      <td>560.955848</td>\n",
       "      <td>607.017633</td>\n",
       "      <td>878.772983</td>\n",
       "      <td>291.287607</td>\n",
       "      <td>113.102262</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.192221</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1625.245675</td>\n",
       "      <td>1010.626148</td>\n",
       "      <td>73.307538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13_dataset</th>\n",
       "      <td>296.615224</td>\n",
       "      <td>567.476478</td>\n",
       "      <td>1187.310355</td>\n",
       "      <td>1355.246832</td>\n",
       "      <td>373.244981</td>\n",
       "      <td>551.257650</td>\n",
       "      <td>567.003198</td>\n",
       "      <td>1462.077545</td>\n",
       "      <td>240.765737</td>\n",
       "      <td>321.228593</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>49.976624</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>84.813429</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1463.618128</td>\n",
       "      <td>991.468041</td>\n",
       "      <td>36.566344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14_dataset</th>\n",
       "      <td>472.557640</td>\n",
       "      <td>836.537133</td>\n",
       "      <td>2210.934477</td>\n",
       "      <td>2427.729054</td>\n",
       "      <td>257.828303</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3108.314441</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>779.176780</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4024.967368</td>\n",
       "      <td>2035.756582</td>\n",
       "      <td>254.250992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15_dataset</th>\n",
       "      <td>322.835132</td>\n",
       "      <td>654.436371</td>\n",
       "      <td>1521.285176</td>\n",
       "      <td>1512.616897</td>\n",
       "      <td>448.879038</td>\n",
       "      <td>537.425280</td>\n",
       "      <td>544.185423</td>\n",
       "      <td>2132.622108</td>\n",
       "      <td>211.747895</td>\n",
       "      <td>550.790330</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>160.379531</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1379.887073</td>\n",
       "      <td>992.933110</td>\n",
       "      <td>8.551342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16_dataset</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1500_dataset</th>\n",
       "      <td>421.900966</td>\n",
       "      <td>1068.250480</td>\n",
       "      <td>763.947180</td>\n",
       "      <td>2031.982123</td>\n",
       "      <td>399.628603</td>\n",
       "      <td>830.893443</td>\n",
       "      <td>1012.072008</td>\n",
       "      <td>1578.698154</td>\n",
       "      <td>579.364466</td>\n",
       "      <td>439.322314</td>\n",
       "      <td>...</td>\n",
       "      <td>523.075555</td>\n",
       "      <td>24.874751</td>\n",
       "      <td>19.187106</td>\n",
       "      <td>106.604025</td>\n",
       "      <td>70.140030</td>\n",
       "      <td>126.567459</td>\n",
       "      <td>46.292104</td>\n",
       "      <td>3148.801630</td>\n",
       "      <td>2000.761016</td>\n",
       "      <td>171.809511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1503_dataset</th>\n",
       "      <td>390.522685</td>\n",
       "      <td>1117.410179</td>\n",
       "      <td>1240.571847</td>\n",
       "      <td>2729.371995</td>\n",
       "      <td>606.392872</td>\n",
       "      <td>788.879644</td>\n",
       "      <td>1120.805876</td>\n",
       "      <td>2097.998346</td>\n",
       "      <td>570.203581</td>\n",
       "      <td>677.082139</td>\n",
       "      <td>...</td>\n",
       "      <td>521.735659</td>\n",
       "      <td>231.707224</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>22.741879</td>\n",
       "      <td>115.893733</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3769.482602</td>\n",
       "      <td>2024.170092</td>\n",
       "      <td>155.397445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1510_dataset</th>\n",
       "      <td>537.635250</td>\n",
       "      <td>2135.785600</td>\n",
       "      <td>1632.460300</td>\n",
       "      <td>2615.275000</td>\n",
       "      <td>542.671700</td>\n",
       "      <td>2053.239700</td>\n",
       "      <td>2234.056200</td>\n",
       "      <td>2418.620800</td>\n",
       "      <td>1060.872200</td>\n",
       "      <td>484.894320</td>\n",
       "      <td>...</td>\n",
       "      <td>1887.967500</td>\n",
       "      <td>518.221300</td>\n",
       "      <td>322.852540</td>\n",
       "      <td>372.113680</td>\n",
       "      <td>184.746340</td>\n",
       "      <td>134.135090</td>\n",
       "      <td>403.948850</td>\n",
       "      <td>7431.572300</td>\n",
       "      <td>3101.317100</td>\n",
       "      <td>669.905700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1512_dataset</th>\n",
       "      <td>522.764254</td>\n",
       "      <td>1994.743078</td>\n",
       "      <td>1519.276701</td>\n",
       "      <td>2547.670164</td>\n",
       "      <td>524.688139</td>\n",
       "      <td>1904.458102</td>\n",
       "      <td>2082.559734</td>\n",
       "      <td>2312.985264</td>\n",
       "      <td>1007.223639</td>\n",
       "      <td>480.948998</td>\n",
       "      <td>...</td>\n",
       "      <td>1728.873548</td>\n",
       "      <td>459.611242</td>\n",
       "      <td>286.338398</td>\n",
       "      <td>338.716040</td>\n",
       "      <td>163.851804</td>\n",
       "      <td>128.216109</td>\n",
       "      <td>358.262836</td>\n",
       "      <td>6949.985265</td>\n",
       "      <td>2990.516346</td>\n",
       "      <td>608.918451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1528_dataset</th>\n",
       "      <td>537.635250</td>\n",
       "      <td>2135.785600</td>\n",
       "      <td>1632.460300</td>\n",
       "      <td>2615.275000</td>\n",
       "      <td>542.671700</td>\n",
       "      <td>2053.239700</td>\n",
       "      <td>2234.056200</td>\n",
       "      <td>2418.620800</td>\n",
       "      <td>1060.872200</td>\n",
       "      <td>484.894320</td>\n",
       "      <td>...</td>\n",
       "      <td>1887.967500</td>\n",
       "      <td>518.221300</td>\n",
       "      <td>322.852540</td>\n",
       "      <td>372.113680</td>\n",
       "      <td>184.746340</td>\n",
       "      <td>134.135090</td>\n",
       "      <td>403.948850</td>\n",
       "      <td>7431.572300</td>\n",
       "      <td>3101.317100</td>\n",
       "      <td>669.905700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1207 rows × 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                C16H30O2     C18H34O2     C18H36O2    C19H37O6P   C19H39O7P  \\\n",
       "11_dataset    265.808388   489.958201   870.396125  1267.842768  313.799574   \n",
       "13_dataset    296.615224   567.476478  1187.310355  1355.246832  373.244981   \n",
       "14_dataset    472.557640   836.537133  2210.934477  2427.729054  257.828303   \n",
       "15_dataset    322.835132   654.436371  1521.285176  1512.616897  448.879038   \n",
       "16_dataset      0.000000     0.000000     0.000000     0.000000    0.000000   \n",
       "...                  ...          ...          ...          ...         ...   \n",
       "1500_dataset  421.900966  1068.250480   763.947180  2031.982123  399.628603   \n",
       "1503_dataset  390.522685  1117.410179  1240.571847  2729.371995  606.392872   \n",
       "1510_dataset  537.635250  2135.785600  1632.460300  2615.275000  542.671700   \n",
       "1512_dataset  522.764254  1994.743078  1519.276701  2547.670164  524.688139   \n",
       "1528_dataset  537.635250  2135.785600  1632.460300  2615.275000  542.671700   \n",
       "\n",
       "                 C20H32O2    C21H39O6P    C21H41O6P    C21H41O7P   C21H43O7P  \\\n",
       "11_dataset     560.955848   607.017633   878.772983   291.287607  113.102262   \n",
       "13_dataset     551.257650   567.003198  1462.077545   240.765737  321.228593   \n",
       "14_dataset       0.000000     0.000000  3108.314441     0.000000  779.176780   \n",
       "15_dataset     537.425280   544.185423  2132.622108   211.747895  550.790330   \n",
       "16_dataset       0.000000     0.000000     0.000000     0.000000    0.000000   \n",
       "...                   ...          ...          ...          ...         ...   \n",
       "1500_dataset   830.893443  1012.072008  1578.698154   579.364466  439.322314   \n",
       "1503_dataset   788.879644  1120.805876  2097.998346   570.203581  677.082139   \n",
       "1510_dataset  2053.239700  2234.056200  2418.620800  1060.872200  484.894320   \n",
       "1512_dataset  1904.458102  2082.559734  2312.985264  1007.223639  480.948998   \n",
       "1528_dataset  2053.239700  2234.056200  2418.620800  1060.872200  484.894320   \n",
       "\n",
       "              ...   C43H81O13P  C43H82NO8P  C44H78NO10P  C44H84NO6P  \\\n",
       "11_dataset    ...     0.000000  100.192221     0.000000    0.000000   \n",
       "13_dataset    ...     0.000000   49.976624     0.000000    0.000000   \n",
       "14_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "15_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "16_dataset    ...     0.000000    0.000000     0.000000    0.000000   \n",
       "...           ...          ...         ...          ...         ...   \n",
       "1500_dataset  ...   523.075555   24.874751    19.187106  106.604025   \n",
       "1503_dataset  ...   521.735659  231.707224     0.000000    0.000000   \n",
       "1510_dataset  ...  1887.967500  518.221300   322.852540  372.113680   \n",
       "1512_dataset  ...  1728.873548  459.611242   286.338398  338.716040   \n",
       "1528_dataset  ...  1887.967500  518.221300   322.852540  372.113680   \n",
       "\n",
       "              C45H78NO8P  C45H80NO8P  C45H82NO8P     C6H11O8P     C6H13O9P  \\\n",
       "11_dataset      0.000000    0.000000    0.000000  1625.245675  1010.626148   \n",
       "13_dataset      0.000000   84.813429    0.000000  1463.618128   991.468041   \n",
       "14_dataset      0.000000    0.000000    0.000000  4024.967368  2035.756582   \n",
       "15_dataset      0.000000  160.379531    0.000000  1379.887073   992.933110   \n",
       "16_dataset      0.000000    0.000000    0.000000     0.000000     0.000000   \n",
       "...                  ...         ...         ...          ...          ...   \n",
       "1500_dataset   70.140030  126.567459   46.292104  3148.801630  2000.761016   \n",
       "1503_dataset   22.741879  115.893733    0.000000  3769.482602  2024.170092   \n",
       "1510_dataset  184.746340  134.135090  403.948850  7431.572300  3101.317100   \n",
       "1512_dataset  163.851804  128.216109  358.262836  6949.985265  2990.516346   \n",
       "1528_dataset  184.746340  134.135090  403.948850  7431.572300  3101.317100   \n",
       "\n",
       "               C9H19O11P  \n",
       "11_dataset     73.307538  \n",
       "13_dataset     36.566344  \n",
       "14_dataset    254.250992  \n",
       "15_dataset      8.551342  \n",
       "16_dataset      0.000000  \n",
       "...                  ...  \n",
       "1500_dataset  171.809511  \n",
       "1503_dataset  155.397445  \n",
       "1510_dataset  669.905700  \n",
       "1512_dataset  608.918451  \n",
       "1528_dataset  669.905700  \n",
       "\n",
       "[1207 rows x 58 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata.to_df()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "691d5abd",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "source": [
    "Every analysed pixel is characterized by its total overlap with cellular regions. The raw data shows no clear association between this overlap and acquired ion intensities. However, after the ion suppression correction, pixels with smaller overlap clearly have lower corresponding intensities (only shown for one metabolite). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "20afa161",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from src.correction import normalize_proportion_ratios\n",
    "       \n",
    "\n",
    "def plot_all_wells(adata, ions=None, row='well', x=const.TPO, ratio=True):\n",
    "    \n",
    "    top_wells = list(set(adata.obs[row]))[:5]\n",
    "    adata = adata[adata.obs[row].isin(top_wells)]\n",
    "    \n",
    "    if ions is None and not ratio:\n",
    "        ions = list(adata.var_names[:5])\n",
    "    elif ions is None and ratio:\n",
    "        ions = list(normalize_proportion_ratios(intensities_ad=adata).to_df().sum().sort_values().tail().index)\n",
    "        \n",
    "    yscale = 'intensity'\n",
    "    if ratio:\n",
    "        adata = normalize_proportion_ratios(intensities_ad=adata)\n",
    "        yscale = 'intensity_proportion_ratio'\n",
    "\n",
    "    plot_df = sc.get.obs_df(adata, keys=[row, x] + ions).melt(id_vars=[row, x], var_name='ion', value_name=yscale)\n",
    "    plot_df= plot_df[plot_df[yscale] > 0]\n",
    "    \n",
    "    if ratio:\n",
    "        plot_df[yscale] = np.log10(plot_df[yscale])\n",
    "        plot_df[x] = np.log10(plot_df[x])\n",
    "       \n",
    "    graph = sns.FacetGrid(plot_df, row=row, col='ion', sharey=False, margin_titles=True)\n",
    "    graph.map(sns.histplot, x, yscale, bins=50, stat='proportion').add_legend()\n",
    "        \n",
    "    params = []\n",
    "\n",
    "    for well in list(set(plot_df[row])):\n",
    "        for i in ions:\n",
    "            q_df = plot_df[(plot_df['ion'] == i) & (plot_df[row] == well)]\n",
    "            if len(q_df) == 0:\n",
    "                params[i] = {'Intercept': np.nan, x: np.nan}\n",
    "                continue\n",
    "            model = smf.quantreg(yscale+' ~ '+x, q_df)\n",
    "            qrmodel = model.fit(q=0.5)\n",
    "            params.append({'ion': i, row: well, 'Intercept': qrmodel.params[0], x: qrmodel.params[1]})\n",
    "    \n",
    "        \n",
    "    return pd.DataFrame(params).sort_values(['ion', row]).set_index(['ion', row])\n",
    "    \n",
    "def compare_pre_post_correction(adata, adata_cor, ions=None, ratio=True):\n",
    "    if ions is None and not ratio:\n",
    "        ions = list(adata.var_names[:5])\n",
    "    elif ions is None and ratio:\n",
    "        ions = list(normalize_proportion_ratios(intensities_ad=adata).to_df().sum().sort_values().tail().index)\n",
    "        \n",
    "    df1 = plot_all_wells(adata, ions=ions, ratio=ratio)\n",
    "    df2 = plot_all_wells(adata_cor, ions=ions, ratio=ratio)\n",
    "    return pd.merge(df1, df2, right_index=True, left_index=True, suffixes=('_uncorrected', '_ISM_correction'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bbb1ef44",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "am_adata.obs[const.TPO] = am_adata_cor.obs[const.TPO]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f224390d",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Intercept_uncorrected</th>\n",
       "      <th>correction_total_pixel_overlap_uncorrected</th>\n",
       "      <th>Intercept_ISM_correction</th>\n",
       "      <th>correction_total_pixel_overlap_ISM_correction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ion</th>\n",
       "      <th>well</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>C19H39O7P</th>\n",
       "      <th>dataset</th>\n",
       "      <td>0.021051</td>\n",
       "      <td>-0.959249</td>\n",
       "      <td>0.021051</td>\n",
       "      <td>-0.063642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C21H43O7P</th>\n",
       "      <th>dataset</th>\n",
       "      <td>0.007465</td>\n",
       "      <td>-1.002011</td>\n",
       "      <td>0.007465</td>\n",
       "      <td>0.000761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C34H68NO6P</th>\n",
       "      <th>dataset</th>\n",
       "      <td>0.034094</td>\n",
       "      <td>-0.979381</td>\n",
       "      <td>0.034094</td>\n",
       "      <td>0.052090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C35H69O8P</th>\n",
       "      <th>dataset</th>\n",
       "      <td>0.023198</td>\n",
       "      <td>-1.004155</td>\n",
       "      <td>0.023198</td>\n",
       "      <td>0.073245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C37H74NO8P</th>\n",
       "      <th>dataset</th>\n",
       "      <td>0.213132</td>\n",
       "      <td>-0.899538</td>\n",
       "      <td>0.213132</td>\n",
       "      <td>-0.126310</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Intercept_uncorrected  \\\n",
       "ion        well                             \n",
       "C19H39O7P  dataset               0.021051   \n",
       "C21H43O7P  dataset               0.007465   \n",
       "C34H68NO6P dataset               0.034094   \n",
       "C35H69O8P  dataset               0.023198   \n",
       "C37H74NO8P dataset               0.213132   \n",
       "\n",
       "                    correction_total_pixel_overlap_uncorrected  \\\n",
       "ion        well                                                  \n",
       "C19H39O7P  dataset                                   -0.959249   \n",
       "C21H43O7P  dataset                                   -1.002011   \n",
       "C34H68NO6P dataset                                   -0.979381   \n",
       "C35H69O8P  dataset                                   -1.004155   \n",
       "C37H74NO8P dataset                                   -0.899538   \n",
       "\n",
       "                    Intercept_ISM_correction  \\\n",
       "ion        well                                \n",
       "C19H39O7P  dataset                  0.021051   \n",
       "C21H43O7P  dataset                  0.007465   \n",
       "C34H68NO6P dataset                  0.034094   \n",
       "C35H69O8P  dataset                  0.023198   \n",
       "C37H74NO8P dataset                  0.213132   \n",
       "\n",
       "                    correction_total_pixel_overlap_ISM_correction  \n",
       "ion        well                                                    \n",
       "C19H39O7P  dataset                                      -0.063642  \n",
       "C21H43O7P  dataset                                       0.000761  \n",
       "C34H68NO6P dataset                                       0.052090  \n",
       "C35H69O8P  dataset                                       0.073245  \n",
       "C37H74NO8P dataset                                      -0.126310  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1511.11x300 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1511.11x300 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare_pre_post_correction(am_adata, am_adata_cor)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.641174,
   "end_time": "2022-12-06T15:36:08.395635",
   "environment_variables": {},
   "exception": true,
   "input_path": "/home/mklein/FDA_project/pipeline_01_correction.ipynb",
   "output_path": "/home/mklein/FDA_project/analysis/Mx_Coculture/pipeline_01_correction.ipynb",
   "parameters": {
    "analysis_path": "/home/mklein/FDA_project/analysis/Mx_Coculture",
    "condition_name": "condition",
    "deconv_default_min_overlap": 0.3,
    "notebooks": [
     "pipeline_01_correction.ipynb",
     "pipeline_02_processing.ipynb",
     "pipeline_03_evaluation.ipynb"
    ],
    "project": "Mx_Coculture",
    "source_path": "/home/mklein/Raw Data/Coculture",
    "target_path": "/home/mklein/FDA_project/data/Mx_Co_Cultured",
    "well_name": "rowcol"
   },
   "start_time": "2022-12-06T15:35:52.754461",
   "version": "2.3.4"
  },
  "vscode": {
   "interpreter": {
    "hash": "89b4449ee30f46b148fb6825d70934bcbb1ebdb6d5b2015fe3835362773c7289"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
