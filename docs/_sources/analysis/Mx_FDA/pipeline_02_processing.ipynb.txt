{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bd53c99f",
   "metadata": {
    "tags": [
     "papermill-error-cell-tag"
    ]
   },
   "source": [
    "<span style=\"color:red; font-family:Helvetica Neue, Helvetica, Arial, sans-serif; font-size:2em;\">An Exception was encountered at '<a href=\"#papermill-error-cell\">In [11]</a>'.</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28c4411d",
   "metadata": {
    "papermill": {
     "duration": 0.008974,
     "end_time": "2022-12-07T21:35:09.699781",
     "exception": false,
     "start_time": "2022-12-07T21:35:09.690807",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Processing\n",
    "\n",
    "Datasets typically consist of several wells on a microscopy slide. In this notebook, the wells are integrated to one annotated data matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fcab0f93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:09.716752Z",
     "iopub.status.busy": "2022-12-07T21:35:09.715936Z",
     "iopub.status.idle": "2022-12-07T21:35:13.573509Z",
     "shell.execute_reply": "2022-12-07T21:35:13.572367Z"
    },
    "papermill": {
     "duration": 3.870275,
     "end_time": "2022-12-07T21:35:13.577366",
     "exception": false,
     "start_time": "2022-12-07T21:35:09.707091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import platform\n",
    "import scanpy as sc\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import anndata as ad\n",
    "import multiprocessing\n",
    "from joblib import Parallel, delayed\n",
    "from importlib import reload\n",
    "from tqdm import tqdm\n",
    "import statsmodels.formula.api as smf\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import functools\n",
    "import sys\n",
    "sys.path.append('/home/mklein/spacem')\n",
    "sys.path.append('/Volumes/mklein/spacem')\n",
    "sys.path.append('/home/mklein/FDA_project')\n",
    "from src.correction import get_matrices_from_dfs, normalize_proportion_ratios\n",
    "from src import const\n",
    "from src.evaluation import plot_all_ion_slopes\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_formats = ['retina']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "de05e8ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:13.594034Z",
     "iopub.status.busy": "2022-12-07T21:35:13.593275Z",
     "iopub.status.idle": "2022-12-07T21:35:13.598568Z",
     "shell.execute_reply": "2022-12-07T21:35:13.597552Z"
    },
    "papermill": {
     "duration": 0.016171,
     "end_time": "2022-12-07T21:35:13.601207",
     "exception": false,
     "start_time": "2022-12-07T21:35:13.585036",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "if platform.system() == \"Darwin\":\n",
    "    target_path = '/Volumes/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "else:\n",
    "    target_path = '/home/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "83f4d188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:13.615515Z",
     "iopub.status.busy": "2022-12-07T21:35:13.615030Z",
     "iopub.status.idle": "2022-12-07T21:35:13.620007Z",
     "shell.execute_reply": "2022-12-07T21:35:13.619182Z"
    },
    "papermill": {
     "duration": 0.014897,
     "end_time": "2022-12-07T21:35:13.622331",
     "exception": false,
     "start_time": "2022-12-07T21:35:13.607434",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "source_path = \"/home/mklein/Raw Data/2022-02-18_FDA_SpaceM\"\n",
    "target_path = \"/home/mklein/FDA_project/data/Mx_FDA\"\n",
    "condition_name = \"celltype\"\n",
    "well_name = \"rowcol\"\n",
    "analysis_path = \"/home/mklein/FDA_project/analysis/Mx_FDA\"\n",
    "notebooks = [\n",
    "    \"pipeline_01_correction.ipynb\",\n",
    "    \"pipeline_02_processing.ipynb\",\n",
    "    \"pipeline_03_evaluation.ipynb\",\n",
    "]\n",
    "project = \"Mx_FDA\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "87293b73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:13.647919Z",
     "iopub.status.busy": "2022-12-07T21:35:13.647423Z",
     "iopub.status.idle": "2022-12-07T21:35:13.653040Z",
     "shell.execute_reply": "2022-12-07T21:35:13.651975Z"
    },
    "papermill": {
     "duration": 0.01562,
     "end_time": "2022-12-07T21:35:13.655408",
     "exception": false,
     "start_time": "2022-12-07T21:35:13.639788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "samples = [dir.name for dir in os.scandir(target_path) if dir.is_dir() and dir.name[0] != \".\"]\n",
    "\n",
    "files = {\n",
    "        'am_sm_matrix': 'am_spatiomolecular_adata.h5ad',\n",
    "        'corr_am_sm_matrix': 'am_spatiomolecular_adata_corrected.h5ad',\n",
    "        'cell_sm_matrix': 'cells_spatiomolecular_adata_spacem.h5ad',\n",
    "        'gen_cell_sm_matrix': 'cells_spatiomolecular_adata.h5ad',\n",
    "        'corr_cell_sm_matrix': 'cells_spatiomolecular_adata_corrected.h5ad',\n",
    "    }\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "339dd280",
   "metadata": {
    "papermill": {
     "duration": 0.006232,
     "end_time": "2022-12-07T21:35:13.667668",
     "exception": false,
     "start_time": "2022-12-07T21:35:13.661436",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "After loading all individual wells, they are concatenated into one data matrix. Cell identifiers are kept unique by adding a well-specific suffix "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e04e453",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:13.681500Z",
     "iopub.status.busy": "2022-12-07T21:35:13.680876Z",
     "iopub.status.idle": "2022-12-07T21:35:19.078252Z",
     "shell.execute_reply": "2022-12-07T21:35:19.076437Z"
    },
    "papermill": {
     "duration": 5.408098,
     "end_time": "2022-12-07T21:35:19.081537",
     "exception": false,
     "start_time": "2022-12-07T21:35:13.673439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "  0%|                                                                                                                                                                            | 0/7 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 14%|███████████████████████▍                                                                                                                                            | 1/7 [00:00<00:04,  1.24it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 29%|██████████████████████████████████████████████▊                                                                                                                     | 2/7 [00:01<00:04,  1.23it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 43%|██████████████████████████████████████████████████████████████████████▎                                                                                             | 3/7 [00:02<00:03,  1.32it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 57%|█████████████████████████████████████████████████████████████████████████████████████████████▋                                                                      | 4/7 [00:02<00:02,  1.39it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 71%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                              | 5/7 [00:03<00:01,  1.28it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                       | 6/7 [00:04<00:00,  1.33it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 7/7 [00:05<00:00,  1.29it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      "100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 7/7 [00:05<00:00,  1.30it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "am_adata_dict = {}\n",
    "am_adata_cor_dict = {}\n",
    "adata_dict = {}\n",
    "gen_adata_dict = {}\n",
    "adata_cor_dict = {}\n",
    "\n",
    "for sample in tqdm(samples):\n",
    "    sample_path = os.path.join(target_path, sample)\n",
    "\n",
    "    project_files = {k: os.path.join(sample_path, v) for k, v in files.items()}\n",
    "\n",
    "    # am_adata_dict[sample] = sc.read(project_files['am_sm_matrix'])\n",
    "    # am_adata_cor_dict[sample] = sc.read(project_files['corr_am_sm_matrix'])\n",
    "    adata_dict[sample] = sc.read(project_files['cell_sm_matrix'])\n",
    "    gen_adata_dict[sample] = sc.read(project_files['gen_cell_sm_matrix'])\n",
    "    adata_cor_dict[sample] = sc.read(project_files['corr_cell_sm_matrix'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d1ec900c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:19.102130Z",
     "iopub.status.busy": "2022-12-07T21:35:19.101531Z",
     "iopub.status.idle": "2022-12-07T21:35:19.111791Z",
     "shell.execute_reply": "2022-12-07T21:35:19.110574Z"
    },
    "papermill": {
     "duration": 0.023554,
     "end_time": "2022-12-07T21:35:19.114691",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.091137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def split_dataset_info(adata):\n",
    "    split = adata.obs['dataset'].str.split(\"_\", expand=True)\n",
    "    adata.obs[['dataset_' + str(col) for col in split.columns]] = split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d651dce",
   "metadata": {
    "papermill": {
     "duration": 0.007381,
     "end_time": "2022-12-07T21:35:19.129833",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.122452",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The combination of wells is not restricted to concatenation of the corresponding data matrices. Some of the ion-related metadata, like the slopes used in ISM correction, are specific to the individual wells. Thus, they are summarised and mean values saved in the combined data matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2e8426e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:19.154337Z",
     "iopub.status.busy": "2022-12-07T21:35:19.153854Z",
     "iopub.status.idle": "2022-12-07T21:35:19.177890Z",
     "shell.execute_reply": "2022-12-07T21:35:19.176726Z"
    },
    "papermill": {
     "duration": 0.03531,
     "end_time": "2022-12-07T21:35:19.180470",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.145160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_range_slopes(adata_dict):\n",
    "    adata = ad.concat(adata_dict, label='well', index_unique=\"_\", merge=\"first\", join='inner', fill_value=0)\n",
    "    conca_var_df = pd.concat({k: v.var for k, v in adata_dict.items()}).select_dtypes(include=[float])\n",
    "    \n",
    "    dfs = [conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').mean(numeric_only = True).reset_index().melt(id_vars=['ion'], value_name='mean'),\n",
    "              conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').min(numeric_only = True).reset_index().melt(id_vars=['ion'], value_name='min'),\n",
    "              conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').max(numeric_only = True).reset_index().melt(id_vars=['ion'], value_name='max')]\n",
    "\n",
    "    sum_df = pd.merge(functools.reduce(lambda left,right: pd.merge(left, right, how='left', on=['ion', 'variable']), dfs), \n",
    "                      pd.concat({k: v.var for k, v in adata_cor_dict.items()})[['correction_using_ion_pool']].reset_index(names = ['well', 'ion']).groupby('ion').sum(numeric_only = True), \n",
    "                      left_on='ion', right_index=True)\n",
    "\n",
    "    def my_bin(i):\n",
    "        if i == len(adata_dict):\n",
    "            return '4_all by pool'\n",
    "        elif i == 0:\n",
    "            return '0_none by pool'\n",
    "        elif i >0.9*len(adata_dict):\n",
    "            return '3_>90% by pool'\n",
    "        elif i >0.5*len(adata_dict):\n",
    "            return '2_>50% by pool'\n",
    "        else:\n",
    "            return '1_<50% by pool'\n",
    "        \n",
    "    sum_df['corr_pool_bins'] = [my_bin(i) for i in sum_df['correction_using_ion_pool']]\n",
    "    #pd.cut(sum_df['correction_using_ion_pool'], bins=4)#, q=[0, .2, .4, .6, .8, 1], labels=['<20%', '<40%', '<60%', '<80%', '>80%'])\n",
    "    \n",
    "    sum_df = sum_df.sort_values(['correction_using_ion_pool'])\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize=(16, 4))\n",
    "    m = sns.lineplot(sum_df[sum_df.variable == 'correction_quantreg_slope'], x = 'ion', y='mean', hue='corr_pool_bins', ax=ax)\n",
    "    sns.lineplot(sum_df[sum_df.variable == 'correction_quantreg_slope'], x = 'ion', y='min', hue='corr_pool_bins', ax=ax, linewidth=0.4)\n",
    "    sns.lineplot(sum_df[sum_df.variable == 'correction_quantreg_slope'], x = 'ion', y='max', hue='corr_pool_bins', ax=ax, linewidth=0.4)\n",
    "    ax.set_xticks([])\n",
    "    ax.set_ylabel('mean, max and min slope')\n",
    "    handles, labels = ax.get_legend_handles_labels()\n",
    "    ax.legend(handles[:5], labels[:5], title='correction_using_ion_pool')\n",
    "    ax.axhline(0)\n",
    "    ax.axhline(-1)\n",
    "    ax.set_title('Range of ISM correction slopes across wells')\n",
    "    fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "300f0323",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:19.196329Z",
     "iopub.status.busy": "2022-12-07T21:35:19.195802Z",
     "iopub.status.idle": "2022-12-07T21:35:19.678071Z",
     "shell.execute_reply": "2022-12-07T21:35:19.676876Z"
    },
    "papermill": {
     "duration": 0.493898,
     "end_time": "2022-12-07T21:35:19.681410",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.187512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/mklein/.conda/envs/ion_suppression/lib/python3.10/site-packages/anndata/_core/anndata.py:798: UserWarning: \n",
      "AnnData expects .var.index to contain strings, but got values like:\n",
      "    []\n",
      "\n",
      "    Inferred to be: empty\n",
      "\n",
      "  value_idx = self._prep_dim_index(value.index, attr)\n"
     ]
    }
   ],
   "source": [
    "import functools\n",
    "def concat_wells(adata_dict):\n",
    "    adata = ad.concat(adata_dict, label='well', index_unique=\"_\", merge=\"first\", join='inner', fill_value=0)\n",
    "    \n",
    "    conca_var_df = pd.concat({k: v.var for k, v in adata_dict.items()}).select_dtypes(include=[float, bool])\n",
    "    if 'correction_quantreg_slope' in conca_var_df.columns:\n",
    "\n",
    "        mean_var_df = conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').mean(numeric_only = True)\n",
    "        mean_var_df.columns = ['mean_'+col for col in mean_var_df.columns]\n",
    "        \n",
    "        std_var_df = conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').std(numeric_only = True)\n",
    "        std_var_df.columns = ['sd_'+col for col in std_var_df.columns]\n",
    "        \n",
    "        count_var_df = conca_var_df.reset_index(names = ['well', 'ion']).groupby('ion').sum(numeric_only = True)\n",
    "        count_var_df.columns = ['sum_'+col for col in count_var_df.columns]\n",
    "        \n",
    "        dfs = [adata.var, \n",
    "            mean_var_df[['mean_correction_full_pixel_avg_intensities', 'mean_correction_quantreg_slope', 'mean_correction_quantreg_intersect']], \n",
    "            std_var_df[['sd_correction_full_pixel_avg_intensities', 'sd_correction_quantreg_slope', 'sd_correction_quantreg_intersect']],\n",
    "            count_var_df[['sum_correction_using_ion_pool']] ]\n",
    "        \n",
    "        adata.var = functools.reduce(lambda left,right: pd.merge(left, right, how='left', left_index=True, right_index=True), dfs)\n",
    "        adata.var['corrected_only_using_pool'] = adata.var['sum_correction_using_ion_pool'] == len(adata_dict)\n",
    "        \n",
    "    #sc.tl.pca(adata)\n",
    "    #sc.external.pp.bbknn(adata, batch_key='well')\n",
    "    split_dataset_info(adata)\n",
    "    return adata\n",
    "\n",
    "# am_adata = concat_wells(am_adata_dict)\n",
    "# am_adata_cor = concat_wells(am_adata_cor_dict)\n",
    "adata = concat_wells(adata_dict)\n",
    "gen_adata = concat_wells(gen_adata_dict)\n",
    "adata_cor = concat_wells(adata_cor_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2e3164e",
   "metadata": {
    "papermill": {
     "duration": 0.008704,
     "end_time": "2022-12-07T21:35:19.700457",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.691753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Especially for the underlying slopes of the ISM correction, taking the mean removes a lot of information. In reality, the different wells exhibit a large variety of slopes, which is visualized in the following figure. All ions are shown by increasing fraction of pool-corrected wells. Clearly, the lower this fraction, the more variable the distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ae084701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:19.717908Z",
     "iopub.status.busy": "2022-12-07T21:35:19.717566Z",
     "iopub.status.idle": "2022-12-07T21:35:20.621698Z",
     "shell.execute_reply": "2022-12-07T21:35:20.620461Z"
    },
    "papermill": {
     "duration": 0.932142,
     "end_time": "2022-12-07T21:35:20.640523",
     "exception": false,
     "start_time": "2022-12-07T21:35:19.708381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 391,
       "width": 1589
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_range_slopes(adata_cor_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80588aad",
   "metadata": {
    "papermill": {
     "duration": 0.011859,
     "end_time": "2022-12-07T21:35:20.666191",
     "exception": false,
     "start_time": "2022-12-07T21:35:20.654332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The concatenated annotated data matrices are individually saved to file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "86d76946",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:20.689919Z",
     "iopub.status.busy": "2022-12-07T21:35:20.689170Z",
     "iopub.status.idle": "2022-12-07T21:35:21.902417Z",
     "shell.execute_reply": "2022-12-07T21:35:21.901244Z"
    },
    "papermill": {
     "duration": 1.229024,
     "end_time": "2022-12-07T21:35:21.906095",
     "exception": false,
     "start_time": "2022-12-07T21:35:20.677071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "adata.write(os.path.join(target_path, \"batch_sm_matrix.h5ad\"))\n",
    "gen_adata.write(os.path.join(target_path, \"gen_batch_sm_matrix.h5ad\"))\n",
    "adata_cor.write(os.path.join(target_path, \"corrected_batch_sm_matrix.h5ad\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0138bc94",
   "metadata": {
    "papermill": {
     "duration": 0.01186,
     "end_time": "2022-12-07T21:35:21.932411",
     "exception": false,
     "start_time": "2022-12-07T21:35:21.920551",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In order to ensure that especially the pixel-cell deconvolution was successful across samples, the summed absolute deviations between different annotated datasets are visualized in the following plot. On one hand, the uncorected but manually deconvoluted (generated) dataset is compared to the dataset directly output by SpaceM. If the same parameters were used for deconvolution, these dataset should not exhibit any differences. On the other hand, the corrected dataset is compared to the generated dataset. These dataset should exhibit differences on a comparable level across samples. If one of the samples shows much greater differences than the others, there might be a sample-specific problem with the parameters used for deconvolution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ee2f942",
   "metadata": {
    "tags": [
     "papermill-error-cell-tag"
    ]
   },
   "source": [
    "<span id=\"papermill-error-cell\" style=\"color:red; font-family:Helvetica Neue, Helvetica, Arial, sans-serif; font-size:2em;\">Execution using papermill encountered an exception here and stopped:</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fa71ecfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-12-07T21:35:21.963709Z",
     "iopub.status.busy": "2022-12-07T21:35:21.963150Z",
     "iopub.status.idle": "2022-12-07T21:35:44.881712Z",
     "shell.execute_reply": "2022-12-07T21:35:44.878788Z"
    },
    "papermill": {
     "duration": 22.934233,
     "end_time": "2022-12-07T21:35:44.884289",
     "exception": true,
     "start_time": "2022-12-07T21:35:21.950056",
     "status": "failed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18050/4077953098.py:5: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  df['well'] = df['cell_id'].str.replace('[0-9]+_', '')\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'y'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/indexes/base.py:3803\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3803\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/_libs/index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/_libs/index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'y'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [11], line 9\u001b[0m\n\u001b[1;32m      6\u001b[0m     df\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_id\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msummed deviation\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwell\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m      7\u001b[0m     sns\u001b[38;5;241m.\u001b[39mlineplot(df, x\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwell\u001b[39m\u001b[38;5;124m'\u001b[39m, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msummed deviation\u001b[39m\u001b[38;5;124m\"\u001b[39m, label\u001b[38;5;241m=\u001b[39mlabel)\u001b[38;5;241m.\u001b[39mset(title \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSummed absolute deviations across wells\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 9\u001b[0m \u001b[43mplot_deviations\u001b[49m\u001b[43m(\u001b[49m\u001b[43madata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgen_adata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mgen. data vs. spacem\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     10\u001b[0m plot_deviations(gen_adata, adata_cor, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcorr. data vs. gen. data\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "Cell \u001b[0;32mIn [11], line 7\u001b[0m, in \u001b[0;36mplot_deviations\u001b[0;34m(adata1, adata2, label)\u001b[0m\n\u001b[1;32m      5\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwell\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_id\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mstr\u001b[38;5;241m.\u001b[39mreplace(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[0-9]+_\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      6\u001b[0m df\u001b[38;5;241m.\u001b[39mcolumns \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_id\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msummed deviation\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwell\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m----> 7\u001b[0m \u001b[43msns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlineplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mwell\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43msummed deviation\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabel\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mset(title \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSummed absolute deviations across wells\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/seaborn/relational.py:645\u001b[0m, in \u001b[0;36mlineplot\u001b[0;34m(data, x, y, hue, size, style, units, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, estimator, errorbar, n_boot, seed, orient, sort, err_style, err_kws, legend, ci, ax, **kwargs)\u001b[0m\n\u001b[1;32m    642\u001b[0m color \u001b[38;5;241m=\u001b[39m kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m, kwargs\u001b[38;5;241m.\u001b[39mpop(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mc\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    643\u001b[0m kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcolor\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m _default_color(ax\u001b[38;5;241m.\u001b[39mplot, hue, color, kwargs)\n\u001b[0;32m--> 645\u001b[0m \u001b[43mp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    646\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m ax\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/seaborn/relational.py:441\u001b[0m, in \u001b[0;36m_LinePlotter.plot\u001b[0;34m(self, ax, kws)\u001b[0m\n\u001b[1;32m    438\u001b[0m     grouped \u001b[38;5;241m=\u001b[39m sub_data\u001b[38;5;241m.\u001b[39mgroupby(orient, sort\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msort)\n\u001b[1;32m    439\u001b[0m     \u001b[38;5;66;03m# Could pass as_index=False instead of reset_index,\u001b[39;00m\n\u001b[1;32m    440\u001b[0m     \u001b[38;5;66;03m# but that fails on a corner case with older pandas.\u001b[39;00m\n\u001b[0;32m--> 441\u001b[0m     sub_data \u001b[38;5;241m=\u001b[39m \u001b[43mgrouped\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43magg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mother\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mreset_index()\n\u001b[1;32m    442\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    443\u001b[0m     sub_data[\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mother\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124mmin\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mnan\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/groupby/groupby.py:1558\u001b[0m, in \u001b[0;36mGroupBy.apply\u001b[0;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1556\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m option_context(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmode.chained_assignment\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m   1557\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1558\u001b[0m         result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_python_apply_general\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_selected_obj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1559\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;66;03m# gh-20949\u001b[39;00m\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;66;03m# try again, with .apply acting as a filtering\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1565\u001b[0m         \u001b[38;5;66;03m# fails on *some* columns, e.g. a numeric operation\u001b[39;00m\n\u001b[1;32m   1566\u001b[0m         \u001b[38;5;66;03m# on a string grouper column\u001b[39;00m\n\u001b[1;32m   1568\u001b[0m         \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_group_selection_context():\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/groupby/groupby.py:1610\u001b[0m, in \u001b[0;36mGroupBy._python_apply_general\u001b[0;34m(self, f, data, not_indexed_same, is_transform, is_agg)\u001b[0m\n\u001b[1;32m   1573\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[1;32m   1574\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_python_apply_general\u001b[39m(\n\u001b[1;32m   1575\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1580\u001b[0m     is_agg: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m   1581\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m NDFrameT:\n\u001b[1;32m   1582\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   1583\u001b[0m \u001b[38;5;124;03m    Apply function f in python space\u001b[39;00m\n\u001b[1;32m   1584\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1608\u001b[0m \u001b[38;5;124;03m        data after applying f\u001b[39;00m\n\u001b[1;32m   1609\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 1610\u001b[0m     values, mutated \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgrouper\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1611\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m not_indexed_same \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1612\u001b[0m         not_indexed_same \u001b[38;5;241m=\u001b[39m mutated \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmutated\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/groupby/ops.py:839\u001b[0m, in \u001b[0;36mBaseGrouper.apply\u001b[0;34m(self, f, data, axis)\u001b[0m\n\u001b[1;32m    837\u001b[0m \u001b[38;5;66;03m# group might be modified\u001b[39;00m\n\u001b[1;32m    838\u001b[0m group_axes \u001b[38;5;241m=\u001b[39m group\u001b[38;5;241m.\u001b[39maxes\n\u001b[0;32m--> 839\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    840\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m mutated \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m _is_indexed_like(res, group_axes, axis):\n\u001b[1;32m    841\u001b[0m     mutated \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/groupby/groupby.py:1541\u001b[0m, in \u001b[0;36mGroupBy.apply.<locals>.f\u001b[0;34m(g)\u001b[0m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(func)\n\u001b[1;32m   1539\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mf\u001b[39m(g):\n\u001b[1;32m   1540\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m np\u001b[38;5;241m.\u001b[39merrstate(\u001b[38;5;28mall\u001b[39m\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m-> 1541\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/seaborn/_statistics.py:482\u001b[0m, in \u001b[0;36mEstimateAggregator.__call__\u001b[0;34m(self, data, var)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, data, var):\n\u001b[1;32m    481\u001b[0m     \u001b[38;5;124;03m\"\"\"Aggregate over `var` column of `data` with estimate and error interval.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 482\u001b[0m     vals \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43mvar\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    483\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m callable(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimator):\n\u001b[1;32m    484\u001b[0m         \u001b[38;5;66;03m# You would think we could pass to vals.agg, and yet:\u001b[39;00m\n\u001b[1;32m    485\u001b[0m         \u001b[38;5;66;03m# https://github.com/mwaskom/seaborn/issues/2943\u001b[39;00m\n\u001b[1;32m    486\u001b[0m         estimate \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimator(vals)\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/frame.py:3804\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3802\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3803\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3804\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3806\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m~/.conda/envs/ion_suppression/lib/python3.10/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3803\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3808\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3809\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3810\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 'y'"
     ]
    },
    {
     "data": {
      "image/png": "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8ft3VZ85Mn/+/MyePTtJctFFF+0QRpJk/PjxGTp0aJLk5ptvzqZNm9o8Z968ebnnnnuSJF/60pd2GUaSpKampsPDCAAAANB5VTWOzJgxo7I9bty4nZ9At2654IILkrz6zJCtMaUtvvGNbyRJ+vTpk/Hjx7f58wAAAEC5qhpH5s6dmySpq6vL8OHDd7lu1KhRle158+a1acbGjRsrD2B973vfW3lmSUtLS1566aUsXrw4GzdubOupAwAAAIWo6v0lCxcuTJIMGTJkt7eyHHvssTt8Zm8988wzWb9+fZJkxIgR+Z//+Z984QtfyA9+8IOsWbMmSdKrV680NTXlS1/6Ut71rne19WskefWept1ZunRpu44LAAAA7FtViyPr16/PsmXLkmSPD0fp379/6urqsmbNmjQ3N7dpzq9+9avtZh533HGVudv+/MEHH8xPf/rTTJ48OZdddlmbZiSpPOwFAAAA6FqqdlvNqlWrKtt783reurq6JMnq1avbNOdPf/pTZfuaa67JsmXL8r73vS9PPfVU1q9fn5dffjm33npr+vXrly1btuSzn/1sHnzwwTbNAAAAALquql45slXPnj33uP6AAw5Ikqxbt65Nc7beOpMkGzZsyNixYzNjxox06/Zq9zn00EPzd3/3dznuuOMyatSobNmyJVdccUXe8573pKamZq/n7OmKlqVLl6axsbFN5w4AAADse1WLI7169aps780DUTds2JAk6d27d7vnJMkNN9xQCSPbOumkk3L22Wfnhz/8YZ577rk899xzOe644/Z6Tke8NxkAAADY/1Tttpq+fftWtvfmVpmtV4DszS04u5pz5JFH5phjjtnl2jPOOKOyPX/+/DbNAQAAALqmqsWRXr16ZeDAgUn2/KaX5cuXV+JIWx98uu36PV3dse3aV155pU1zAAAAgK6panEkSYYOHZokeeGFF9LS0rLLdYsWLdrhM3vrrW99a2V78+bNu1277f7dvVoYAAAAKEdV48hJJ52U5NVbZhYsWLDLdXPmzKlsjxw5sk0z3vSmN+WNb3xjkuS3v/3tbtduu/8v//Iv2zQHAAAA6JqqGkfOPPPMyvZdd9210zVbtmzJ3XffnSSpr69PU1NTm+e8//3vT5K8/PLLeeyxx3a5bvr06ZXtk08+uc1zAAAAgK6nqnGksbGxEiGmTJmSxx9/fIc1kydPzsKFC5Mkl156aXr06LHd/qlTp6ampiY1NTW5+uqrdzrnsssuq7y15jOf+cx2r/fd6tvf/nZmz56dJBkzZoy3zwAAAABJqhxHkuSWW25J796909LSktNPPz1f+9rX8sQTT+SRRx7JJZdckiuuuCJJ0tDQkPHjx7drxhvf+MZ85StfSZIsWLAgjY2N+da3vpUFCxbkZz/7WT71qU/lwgsvTJL069cvN910U4d8NwAAAKDzq/pTSYcNG5Z777035513XlauXJmJEyfusKahoSEzZ87c7rW8bfX3f//3+dOf/pRJkyblV7/6VSWGbOvQQw/NjBkz8uY3v7ndcwAAAICupepXjiTJ2LFj8+yzz+byyy9PQ0NDDjzwwNTX1+eEE07IpEmT8vTTT2fIkCGvec7Xvva1/PznP8/555+fI444IgcccEAOOuignHjiifnqV7+aX//61xkxYkQHfCMAAACgq6hpbW1t3dcn0RUsWbIkgwcPTpI0Nzd7pgkAAABUQTV+/35drhwBAAAA2F+JIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAU7XWLI4sXL86ECRMydOjQ1NXVZcCAAWlsbMyNN96YtWvXVmXm0qVLU19fn5qamtTU1GT06NFVmQMAAAB0XrWvx5CZM2fm3HPPzYoVKyo/W7t2bebPn5/58+fnjjvuyAMPPJCjjjqqQ+d++tOf3m4mAAAAwJ+r+pUjzzzzTM4555ysWLEiffr0ybXXXpvHHnssDz/8cC6++OIkyfPPP58xY8Zk9erVHTb3xz/+cf71X/81hx56aIcdEwAAAOh6qh5HLrvssqxduza1tbV56KGHMnHixIwYMSKnnHJKbr/99lx//fVJkkWLFuXrX/96h8xcvXp1PvnJTyZJbrzxxg45JgAAANA1VTWOzJ8/P7Nnz06SXHTRRRkxYsQOa8aPH5+hQ4cmSW6++eZs2rTpNc+dOHFimpub09TUlPPPP/81Hw8AAADouqoaR2bMmFHZHjdu3M5PoFu3XHDBBUmS5cuXV2JKez355JP55je/mZ49e+a22257TccCAAAAur6qxpG5c+cmSerq6jJ8+PBdrhs1alRle968ee2e19LSko9//OPZsmVLPve5z+WYY45p97EAAACAMlT1bTULFy5MkgwZMiS1tbsedeyxx+7wmfa48cYb88wzz+Too4/OxIkT232cnVmyZMlu9y9durRD5wEAAACvj6rFkfXr12fZsmVJkkGDBu12bf/+/VNXV5c1a9akubm5XfNefPHFfOUrX0mS3HrrrenVq1e7jrMrgwcP7tDjAQAAAPuHqt1Ws2rVqsp2nz599ri+rq4uSdr9Ot9LLrkk69atywc/+MGcfvrp7ToGAAAAUJ6qXjmyVc+ePfe4/oADDkiSrFu3rs2z7r777syaNSv9+vXLTTfd1ObP7409XdGydOnSNDY2VmU2AAAAUD1ViyPb3taycePGPa7fsGFDkqR3795tmrNs2bKMHz8+SXLttdfm8MMPb9Pn99aebg0CAAAAOqeq3VbTt2/fyvbe3CqzZs2aJHt3C862PvvZz2bZsmU54YQT8olPfKJtJwkAAAAUr6pXjgwcODDLli3b45teli9fXokjbXnw6R/+8Ifcc889SZJTTjkl3//+93e7/pVXXsm0adOSJEceeWTe8Y537PUsAAAAoGuq6qt8hw4dmrlz5+aFF15IS0vLLl/nu2jRou0+s7e2vV3n+uuv3+P6hQsX5sMf/nCS5KMf/ag4AgAAAFTvtpokOemkk5K8esvMggULdrluzpw5le2RI0dW85QAAAAAtlPVOHLmmWdWtu+6666drtmyZUvuvvvuJEl9fX2ampr2+vhHHHFEWltb9/hnq1GjRlV+NnXq1HZ9JwAAAKBrqWocaWxszMknn5wkmTJlSh5//PEd1kyePDkLFy5Mklx66aXp0aPHdvunTp2ampqa1NTU5Oqrr67m6QIAAAAFquozR5LklltuyciRI7Nu3bqcfvrpmThxYpqamrJu3bpMmzYtt99+e5KkoaGh8kpeAAAAgNdL1ePIsGHDcu+99+a8887LypUrM3HixB3WNDQ0ZObMmdu9/hcAAADg9VDV22q2Gjt2bJ599tlcfvnlaWhoyIEHHpj6+vqccMIJmTRpUp5++ukMGTLk9TgVAAAAgO3UtG77xFLabcmSJRk8eHCSpLm5OYMGDdrHZwQAAABdTzV+/35drhwBAAAA2F+JIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACja6xZHFi9enAkTJmTo0KGpq6vLgAED0tjYmBtvvDFr1659TcdeuXJlpk2blosvvjjHH3986uvr07NnzxxyyCEZPXp0brzxxvy///f/OuaLAAAAAF1KTWtra2u1h8ycOTPnnntuVqxYsdP9xxxzTB544IEcddRRbT72gw8+mLPOOisbNmzY7brDDjss3/ve99LU1NTmGXtjyZIlGTx4cJKkubk5gwYNqsocAAAAKFk1fv+u+pUjzzzzTM4555ysWLEiffr0ybXXXpvHHnssDz/8cC6++OIkyfPPP58xY8Zk9erVbT7+//7v/2bDhg3p1q1bzjjjjNx000352c9+ll/84he577778sEPfjBJ8vLLL+d973tf/vM//7Mjvx4AAADQydVWe8Bll12WtWvXpra2Ng899FBGjBhR2XfKKafkzW9+c6644oosWrQoX//613PVVVe16fg9evTIJZdckokTJ+aNb3zjdvuGDRuWsWPHZuTIkfnMZz6TtWvXZvz48Xn44Yc75LsBAAAAnV9Vb6uZP39+GhsbkySXXHJJ/umf/mmHNVu2bMlf/dVfZeHChenfv39efvnl9OjRo8PP5cQTT8xTTz2Vbt265ZVXXsnBBx/cocd3Ww0AAABUX6e7rWbGjBmV7XHjxu38BLp1ywUXXJAkWb58eWbPnl2Vcxk9enSSV2PMf//3f1dlBgAAAND5VDWOzJ07N0lSV1eX4cOH73LdqFGjKtvz5s2ryrls+8DWbt28wRgAAAB4VVUrwcKFC5MkQ4YMSW3trh9vcuyxx+7wmY42Z86cJEltbW2GDBlSlRkAAABA51O1B7KuX78+y5YtS5I93v/Tv3//1NXVZc2aNWlubu7wc5k5c2aeffbZJMkZZ5yRfv36tfkYS5Ys2e3+pUuXtuvcAAAAgH2ranFk1apVle0+ffrscf3WONKe1/nuzp/+9Kd88pOfTJJ07949X/3qV9t1nK0PewEAAAC6lqrdVrN+/frKds+ePfe4/oADDkiSrFu3rsPOYfPmzTn33HPz0ksvJUm+9KUvZdiwYR12fAAAAKDzq9qVI7169apsb9y4cY/rtz4wtXfv3h12Dp/4xCfyk5/8JEkyZsyYXHnlle0+1p5u91m6dGnltcUAAABA51G1ONK3b9/K9t7cKrNmzZoke3cLzt74whe+kNtvvz1JctJJJ+UHP/hBunfv3u7jdcR7kwEAAID9T9Vuq+nVq1cGDhyYZM8PM12+fHkljnTEsz0mTZqU6667Lkly/PHH5/777+/QK1IAAACArqOqr/IdOnRokuSFF15IS0vLLtctWrRoh8+016233prPf/7zlWP99Kc/zUEHHfSajgkAAAB0XVWNIyeddFKSV2+ZWbBgwS7XzZkzp7I9cuTIds+755578qlPfSpJctRRR2XWrFmVq1cAAAAAdqaqceTMM8+sbN911107XbNly5bcfffdSZL6+vo0NTW1a9b06dMzbty4tLa2ZtCgQXn44Yfzhje8oV3HAgAAAMpR1TjS2NiYk08+OUkyZcqUPP744zusmTx5chYuXJgkufTSS9OjR4/t9k+dOjU1NTWpqanJ1VdfvdM5Dz30UD784Q9n8+bNOfTQQzNr1qwcccQRHfpdAAAAgK6pam+r2eqWW27JyJEjs27dupx++umZOHFimpqasm7dukybNq3yRpmGhoaMHz++zcd/4oknctZZZ2Xjxo3p0aNHbrrppmzatCnPPffcLj8zaNCg1NfXt/crAQAAAF1I1ePIsGHDcu+99+a8887LypUrM3HixB3WNDQ0ZObMmdu9/ndv/eQnP8natWuTJJs2bcq55567x8/cddddufDCC9s8CwAAAOh6qnpbzVZjx47Ns88+m8svvzwNDQ058MADU19fnxNOOCGTJk3K008/nSFDhrwepwIAAACwnZrW1tbWfX0SXcGSJUsyePDgJElzc3MGDRq0j88IAAAAup5q/P79ulw5AgAAALC/EkcAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKNrrFkcWL16cCRMmZOjQoamrq8uAAQPS2NiYG2+8MWvXru2wOdOmTcsZZ5yRww8/PL169coRRxyR888/P0888USHzQAAAAC6jprW1tbWag+ZOXNmzj333KxYsWKn+4855pg88MADOeqoo9o9Y/369fnABz6Q+++/f6f7u3XrlquvvjpXXnllu2fszpIlSzJ48OAkSXNzcwYNGlSVOQAAAFCyavz+XfUrR5555pmcc845WbFiRfr06ZNrr702jz32WB5++OFcfPHFSZLnn38+Y8aMyerVq9s956KLLqqEkaampsyYMSNPPvlkpkyZkqOPPjpbtmzJVVddlTvuuKNDvhcAAADQNVT9ypGmpqbMnj07tbW1efTRRzNixIjt9t9www254oorkiTXXHNNrrrqqjbPmDNnTkaPHp0kGTt2bH70ox+le/fulf3Lli3L8OHDs3jx4vTv3z8vvvhi6uvr2/2ddsaVIwAAAFB9ne7Kkfnz52f27NlJXr2y48/DSJKMHz8+Q4cOTZLcfPPN2bRpU5vnXH/99UmS7t2759Zbb90ujCTJwIEDM2nSpCTJ8uXLM2XKlDbPAAAAALqmqsaRGTNmVLbHjRu38xPo1i0XXHBBklfDxdaYsrdWr16dhx9+OEly2mmn7bIYnX322enXr1+SZPr06W2aAQAAAHRdVY0jc+fOTZLU1dVl+PDhu1w3atSoyva8efPaNOPJJ5/Mhg0bdjjOn+vZs2fe+c53Vj7TnitUAAAAgK6nqnFk4cKFSZIhQ4aktrZ2l+uOPfbYHT7T1hl/fpzdzWlpaclvfvObNs0BAAAAuqZdF4vXaP369Vm2bFmS7PHhKP37909dXV3WrFmT5ubmNs3Zdv2e5mx9YMvWz73lLW/Z6zlLlizZ6/NYunTpXh8XAAAA2Hvb/s7d0tLSIcesWhxZtWpVZbtPnz57XL81jrT1db5tmVNXV1fZbuucbcPKnjQ2Nrbp2AAAAEDb/fGPf8wRRxzxmo9Ttdtq1q9fX9nu2bPnHtcfcMABSZJ169ZVbc7WGe2ZAwAAAHRNVbtypFevXpXtjRs37nH91oeq9u7du2pzts5oz5w93e6zfv36LFq0KIcddlgOOeSQ3T5jBQDYPyxdurRyxeeTTz6Zww8/fB+fEQCwJy0tLfnjH/+YJDnuuOM65JhV+w2+b9++le29uYVlzZo1SfbuFpz2ztk6oz1z9vQ8k+TVB88CAJ3T4Ycfvlf/fw8A7HsdcSvNtqp2W02vXr0ycODAJHt+mOny5csr4aItz/ZIto8WbXloalvnAAAAAF1TVV/lO3To0CTJCy+8sNsnyC5atGiHz+ytbd84s+1xdjentrbWVR4AAABAkirHkZNOOinJq7ezLFiwYJfr5syZU9keOXJkm2aceOKJlQexbnucP7dx48Y88cQTO3wGAAAAKFtV48iZZ55Z2b7rrrt2umbLli25++67kyT19fVpampq04y+ffvm1FNPTZLMmjVrl7fWTJ8+PStXrkySnHXWWW2aAQAAAHRdVY0jjY2NOfnkk5MkU6ZMyeOPP77DmsmTJ2fhwoVJkksvvTQ9evTYbv/UqVNTU1OTmpqaXH311TudM2HChCSvPrH2k5/8ZDZv3rzd/mXLluVzn/tcklcDzMc+9rHX9L0AAACArqOqcSRJbrnllvTu3TstLS05/fTT87WvfS1PPPFEHnnkkVxyySW54oorkiQNDQ0ZP358u2accsop+dCHPpQkue+++3Laaaflvvvuy1NPPZW77ror73znO7N48eIkyXXXXZf+/ft3zJcDAAAAOr2qvcp3q2HDhuXee+/Neeedl5UrV2bixIk7rGloaMjMmTO3ey1vW915551ZuXJlHnjggTzyyCN55JFHttvfrVu3XHnllbnkkkvaPQMAAADoeqp+5UiSjB07Ns8++2wuv/zyNDQ05MADD0x9fX1OOOGETJo0KU8//fRrfntM7969M3PmzHznO9/JaaedlkMPPTQ9e/bM4MGD85GPfCTz5s3b5W05AECZBg0alNbW1rS2tmbQoEH7+nQAgH2kprW1tXVfnwQAAADAvvK6XDkCAAAAsL8SRwAAAICiiSMAAABA0cQRAAAAoGjiCAAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAPbSli1bMmLEiNTU1FT+AACdnzgCALCXbr311jzxxBP7+jQAgA5W09ra2rqvTwIAYH/3+9//Pm95y1uyatWqHHzwwVm2bFmSxL9KAUDn58oRAIC98KlPfSorV67MuHHj8ta3vnVfnw4A0IHEEQCAPZg+fXpmzJiRgQMH5vrrr9/XpwMAdDBxBADolMaMGZOampqMGDFip/vnzZtXeWhqfX19Nm/evMOa5cuXp1u3bqmpqck3v/nNnR5n5cqV+cxnPpMkueGGG3LwwQd33JcAAPYL4ggA0CmNHj06SfLUU09l9erVO+yfPXt2ZXvFihV5+umnd1gzZ86cyjNDRo0atdM5n//85/P73/8+7373u3PhhRe+5vMGAPY/4ggA0CltjRktLS2ZN2/eDvu3jSM7+/u2Pxs4cOBOnyPy+OOP55//+Z/To0eP3Hbbba/5nAGA/ZM4AgB0SsOHD0/fvn2T7Bg+Nm3alMcffzxJ8jd/8zc7XbPtz9797nenpqZmh2N8/OMfz5YtWzJhwoS85S1v6dgvAADsN8QRAKBT6t69e0aOHJlkx/Dx5JNPZu3atenXr18uv/zyJK8+g2Tb544sX748v/zlL5P83y0625o0aVKee+65HHnkkbnyyiur8yUAgP2COAIAdFpbo8aCBQu2e+7I1lhy8skn513veld69+69w3NHHn300WzZsiXJjs8b+c1vfpNrr702SfKNb3wjvXv3ruK3AAD2NXEEAOi0dvXcka1xZPTo0enZs2fljTbbXmGydXvAgAE57rjjtjvuJZdckvXr1+f9739//vqv/7p6XwAA2C+IIwBAp3XCCSekT58+Sf4vdmzatCmPPfZYkv+7smTr/+4sjvz580buvPPOPPLII+nbt29uueWWqp4/ALB/qN3XJwAA0F61tbV517velYceeqgSO+bPn1953siwYcOS/F8cmTt3bjZv3pxVq1bl2Wef3W7fVpMmTUry6lUpc+fO3encV155pbI9bdq0JEldXV3Gjh3bUV8NAHgdiSMAQKc2evToPPTQQ5Xnjmz7vJHu3bsnSd7xjnekd+/eWblyZZ5++un84Q9/2OXzRjZs2JAkuf/++3P//ffvcf6HP/zhJMmb3vQmcQQAOim31QAAndqfP3dk2+eNbPXnzx3ZuqZ///5529ve9nqeLgCwHxJHAIBO7cQTT0xdXV2S5N///d93eN7IVts+d2Tbq0u6ddv+X4d+97vfpbW1dbd/tr3aZOvPfve731Xl+wEA1SeOAACdWo8ePSpXhUyZMiVr1qzZ7nkjW22NI3PmzMkzzzyz3c8AgLKJIwBAp7c1cqxYsSLJ9s8b2Wrrc0dWr169y+eNAABlEkcAgE7vzyPHzq4I2fa5I0ly0EEH5e1vf3uVzwwA6AzEEQCg02tsbMyBBx5Y+fuubpdpamqqbO/seSMAQJlqWltbW/f1SQAAAADsK/5zCQAAAFA0cQQAAAAomjgCAAAAFE0cAQAAAIomjgAAAABFE0cAAACAookjAAAAQNHEEQAAAKBo4ggAAABQNHEEAAAAKJo4AgAAABRNHAEAAACKJo4AAAAARRNHAAAAgKKJIwAAAEDRxBEAAACgaOIIAAAAUDRxBAAAACiaOAIAAAAUTRwBAAAAiiaOAAAAAEUTRwAAAICiiSMAAABA0cQRAAAAoGj/HxY0AIp0NggFAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 418,
       "width": 547
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_deviations(adata1, adata2, label=\"\"):\n",
    "    df = np.abs(adata1.to_df() - adata2.to_df()).sum(axis=1)\n",
    "    df = df / (adata1.to_df().shape[0] * adata1.to_df().shape[1])\n",
    "    df = df.reset_index()\n",
    "    df['well'] = df['cell_id'].str.replace('[0-9]+_', '')\n",
    "    df.columns = ['cell_id', 'summed deviation', 'well']\n",
    "    sns.lineplot(df, x='well', y=\"summed deviation\", label=label).set(title = 'Summed absolute deviations across wells')\n",
    "    \n",
    "plot_deviations(adata, gen_adata, 'gen. data vs. spacem')\n",
    "plot_deviations(gen_adata, adata_cor, 'corr. data vs. gen. data')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 40.952179,
   "end_time": "2022-12-07T21:35:48.246504",
   "environment_variables": {},
   "exception": true,
   "input_path": "/home/mklein/FDA_project/pipeline_02_processing.ipynb",
   "output_path": "/home/mklein/FDA_project/analysis/Mx_FDA/pipeline_02_processing.ipynb",
   "parameters": {
    "analysis_path": "/home/mklein/FDA_project/analysis/Mx_FDA",
    "condition_name": "celltype",
    "notebooks": [
     "pipeline_01_correction.ipynb",
     "pipeline_02_processing.ipynb",
     "pipeline_03_evaluation.ipynb"
    ],
    "project": "Mx_FDA",
    "source_path": "/home/mklein/Raw Data/2022-02-18_FDA_SpaceM",
    "target_path": "/home/mklein/FDA_project/data/Mx_FDA",
    "well_name": "rowcol"
   },
   "start_time": "2022-12-07T21:35:07.294325",
   "version": "2.3.4"
  },
  "vscode": {
   "interpreter": {
    "hash": "89b4449ee30f46b148fb6825d70934bcbb1ebdb6d5b2015fe3835362773c7289"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}