{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparison of Martijns and Marius results of ion suppression correction\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scanpy as sc\n",
    "import seaborn as sns\n",
    "from src.correction import *\n",
    "from src import const\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Martijn implemented the correction in Rmd, his results are loaded from CSV files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_intensities_r(path, prefix = const.CELL_PRE):\n",
    "    intensities_df = pd.read_csv(path)\n",
    "    intensities_df.index = [ prefix + str(i) for i in intensities_df.cell]\n",
    "    intensities_df.pop('cell')\n",
    "    return(intensities_df)\n",
    "\n",
    "\n",
    "raw_intensities_r = load_intensities_r('data/Martijns_results_C18H32O2/raw_intensities_r.csv').dropna()\n",
    "cor_intensities_r = load_intensities_r('data/Martijns_results_C18H32O2/cor_intensities_r.csv').dropna()\n",
    "cor_pixel_intensities_r = load_intensities_r('data/Martijns_results_C18H32O2/cor_pixel_intensities_r.csv', prefix=const.PIXEL_PRE).dropna()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I implemented the correction in Python. The resulting spatiomolecular matrices are compared on multiple levels:\n",
    "\n",
    "- corrected ion intensities of individual pixels (before pixel-cell deconvolution)\n",
    "- uncorrected ion intensities of cells (no IS correction but pixel-cell deconvolution)\n",
    "- corrected ion intensities of cells (both IS correction and pixel-cell deconvolution)\n",
    "\n",
    "By that, the source of possible deviations can be narrowed down to one of the processing steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = sc.read('data/Mx_Co_Cultured/dataset_threshold_0.1/cells_spatiomolecular_adata.h5ad')\n",
    "adata_cor = sc.read('data/Mx_Co_Cultured/dataset_threshold_0.1/cells_spatiomolecular_adata_corrected.h5ad')\n",
    "am_adata_cor = sc.read('data/Mx_Co_Cultured/dataset_threshold_0.1/am_spatiomolecular_adata_corrected.h5ad')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# only molecules and cells that occur in both datasets are compared.\n",
    "included_molecules = adata.var.index.intersection(raw_intensities_r.columns).intersection(\n",
    "    ad.read(os.path.join('data/Mx_Co_Cultured', \"gen_batch_sm_matrix.h5ad\")).var_names)\n",
    "#included_molecules = ['C16H30O2', \"C25H44NO7P\", \"C45H78NO8P\"]\n",
    "included_cells = adata.obs.index.intersection(raw_intensities_r.index)#[[26, 75, 433]]\n",
    "included_pixels = am_adata_cor.obs.index.intersection(cor_pixel_intensities_r.index)#[[26, 75, 433]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a measure of deviation, I calculate the difference for every metabolite intensity for every cell/pixel. If the processing in R and Python is the same, these differences should all be close to 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.pyplot import axis\n",
    "\n",
    "def calc_diff_df(df1, df2):\n",
    "    logfc_df = (df1.loc[included_cells, included_molecules] - df2.loc[included_cells, included_molecules]) / df1.loc[included_cells, included_molecules]\n",
    "    #logfc_df = np.log10(logfc_df)\n",
    "    #logfc_df = logfc_df.replace([np.nan, np.Inf, -np.Inf], 0)\n",
    "    return(logfc_df)\n",
    "\n",
    "raw_fc_df = calc_diff_df(adata.to_df(), raw_intensities_r)\n",
    "cor_fc_df = calc_diff_df(adata_cor.to_df(), cor_intensities_r)\n",
    "\n",
    "pixel_fc_df = am_adata_cor.to_df().loc[included_pixels, included_molecules] - cor_pixel_intensities_r.loc[included_pixels, included_molecules].replace(np.Inf, 0)\n",
    "#pixel_fc_df = np.log10(pixel_fc_df).replace([np.nan, np.Inf, -np.Inf], 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deviations are shown visually in a heatmap. As quantitative measures, the summed (absolute differences summed across whole dataset) and average absolute deviations (sum of all absolute differences divided by number of datapoints) are given.\n",
    "\n",
    "### Corrected intensities of pixels\n",
    "\n",
    "The isolated process of ion intensity correction has added deviations to a selected set of metabolites, that partly coincides with the set that was corrected using a reference metabolite as they lack enough valid data points for quantile regression. Specifically, the python-generated data yielded, if any, only higher values than the intensities processed by the R script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.express as px\n",
    "from matplotlib_venn import venn2\n",
    "\n",
    "def calc_differences(df, mean = None):\n",
    "    \n",
    "    df.index.name = \"cells\"\n",
    "    df.columns.name = \"ions\"\n",
    "    \n",
    "    # fig = px.imshow(df.transpose())\n",
    "    # fig.show()\n",
    "    fig, ax = plt.subplots(figsize=(14, 4))\n",
    "    sns.heatmap(df.T)\n",
    "\n",
    "    #sns.clustermap(df)\n",
    "    print('summed absolute difference of log fold changes: %1.2f' % np.abs(df).values.sum())\n",
    "    print('average absolute difference of individual log fold change: %1.4f' % (np.abs(df).values.sum() / df.shape[0] / df.shape[1] ))\n",
    "    if mean is not None:\n",
    "        print('relative absolute deviation: %1.5f' % (np.abs(df).values.mean() / mean ))\n",
    "\n",
    "\n",
    "\n",
    "calc_differences(pixel_fc_df, mean = am_adata_cor.to_df().loc[included_pixels, included_molecules].mean().mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In contrast, when observing the pixel-cell devonvolution independantly, deviations naturally occur rather for selected cells than metabolites. With multiple calculations of overlap-matrices and deconvolution weights, calculation inaccuracies could have possibly been amplified for some cells more than others. This step has been re-engineered after an internal SpaceM method by both Martijn and me and should be processed using the original method in the long run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "calc_differences(raw_fc_df, mean = adata.to_df().loc[included_cells, included_molecules].mean().mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When correction and pixel-cell deconvolution are taken together, it can be expected that molecule-specific and cell-specific deviations add up. This can be observed precisely with both the heatmap and the average absolute deviation per data point. As the discrepancies generated by the ion-suppression correction are generally smaller than the ones resulting from (Martijns or my implementation of) pixel-cell deconvolution, I would accept them as they are."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "calc_differences(cor_fc_df, mean = adata_cor.to_df().loc[included_cells, included_molecules].mean().mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lastly, the relative differences in every data point are calculated and plotted separately for every datapoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pixel_rel = (am_adata_cor.to_df().loc[included_pixels, included_molecules] - cor_pixel_intensities_r.loc[included_pixels, included_molecules].replace(np.Inf, 0)) / am_adata_cor.to_df().loc[included_pixels, included_molecules]\n",
    "pixel_rel.index = [\"px_\" + i for i in pixel_rel.index]\n",
    "pixel_rel\n",
    "print(\"median relative deviation: %1.2f Percent\" % (100*np.abs(pixel_rel).stack().median()))\n",
    "print(\"min relative deviation: %1.2f Percent\"% (100*(pixel_rel).stack().min()))\n",
    "print(\"max relative deviation: %1.2f Percent\" % (100*(pixel_rel).stack().max()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "sns.kdeplot(pixel_rel.loc[:, np.random.choice(pixel_rel.columns, 14)], ax=ax1)\n",
    "sns.kdeplot(pixel_rel.T.loc[:, np.random.choice(pixel_rel.index, 14)], ax=ax2)\n",
    "ax1.set(ylabel=\"density\", xlabel=const.LABEL['RDens'], title=\"Colored by ion\")\n",
    "ax2.set(ylabel=\"\", xlabel=const.LABEL['RDens'], title=\"Colored by pixel\")\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "deconv_rel = (adata_cor.to_df().loc[included_cells, included_molecules] - raw_intensities_r.loc[included_cells, included_molecules].replace(np.Inf, 0)) / adata.to_df().loc[included_cells, included_molecules]\n",
    "deconv_rel.index = [\"cell_\" + i for i in deconv_rel.index]\n",
    "\n",
    "print(\"median relative deviation: %1.1f Percent\" % (100*np.abs(deconv_rel).stack().median()))\n",
    "print(\"min relative deviation: %1.1f Percent\"% (100*(deconv_rel).stack().min()))\n",
    "print(\"max relative deviation: %1.1f Percent\" % (100*(deconv_rel).stack().max()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n",
    "sns.kdeplot(deconv_rel.loc[:, np.random.choice(deconv_rel.columns, 14)], ax=ax1)\n",
    "sns.kdeplot(deconv_rel.T.loc[:, np.random.choice(deconv_rel.index, 14)], ax=ax2)\n",
    "ax1.set(ylabel=\"density\", xlabel=const.LABEL['RDens'], title=\"Colored by ion\")\n",
    "ax2.set(ylabel=\"\", xlabel=const.LABEL['RDens'], title=\"Colored by cell\")\n",
    "fig.tight_layout()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "“ion_suppression_new”",
   "language": "python",
   "name": "ion_suppression"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "vscode": {
   "interpreter": {
    "hash": "89b4449ee30f46b148fb6825d70934bcbb1ebdb6d5b2015fe3835362773c7289"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
