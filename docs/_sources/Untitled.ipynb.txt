{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48c33b81-cc49-47e2-a34f-77d31a50b914",
   "metadata": {},
   "outputs": [],
   "source": [
    "import platform\n",
    "import os\n",
    "import multiprocessing\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import anndata as ad\n",
    "import scanpy as sc\n",
    "import seaborn as sns\n",
    "from sklearn.cluster import KMeans\n",
    "import re\n",
    "import outer_spacem as osm\n",
    "import sys\n",
    "sys.path.append('/home/mklein/spacem')\n",
    "sys.path.append('/Volumes/mklein/spacem')\n",
    "sys.path.append('/home/mklein/FDA_project')\n",
    "from src.correction import *\n",
    "from src.evaluation import intermixing, MetaboliteAnalysis\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_formats = ['retina']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0eb80774-1e0c-4b12-ad80-3a355fdd8e41",
   "metadata": {
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "if platform.system() == \"Darwin\":\n",
    "    target_path = '/Volumes/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "    if True:\n",
    "        target_path = '/Users/mariusklein/Local_Project_Files/FDA_project/data/Lx_Glioblastoma'\n",
    "\n",
    "else:\n",
    "    target_path = '/home/mklein/FDA_project/data/Lx_Glioblastoma'\n",
    "\n",
    "condition_name = 'condition'\n",
    "well_name = 'rowcol'\n",
    "project = 'Lx_Glioblastoma'\n",
    "analysis_path = target_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c654cf9-851b-4e68-94c6-238306d6c98e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "adata = ad.read(os.path.join(target_path, \"gen_batch_sm_matrix.h5ad\"))\n",
    "adata_cor = ad.read(os.path.join(target_path, \"corrected_batch_sm_matrix.h5ad\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85e69c07-ffdf-4f58-929b-32b9e4bd50bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "norm_int = am_adata.copy()\n",
    "if ratios:\n",
    "    norm_int = normalize_proportion_ratios(am_adata, normalized=True)\n",
    "\n",
    "\n",
    "ions = [] \n",
    "if len(subset) == 0:\n",
    "    ions = list(am_adata.var_names)\n",
    "else:\n",
    "    ions = list(subset)\n",
    "\n",
    "ions.append(const.TPO)\n",
    "# print(ions)\n",
    "grid_slopes_df = sc.get.obs_df(norm_int, keys=ions)\n",
    "grid_slopes_df['am'] = grid_slopes_df.index\n",
    "plot_df = grid_slopes_df.melt(id_vars=['am', const.TPO], var_name='ion')\n",
    "if log:\n",
    "    plot_df[[const.TPO, 'value']] = np.log10(plot_df[[const.TPO, 'value']])\n",
    "grid = sns.FacetGrid(plot_df, col = 'ion', col_wrap = col_wrap)\n",
    "if kde:\n",
    "    grid.map(sns.kdeplot, const.TPO, 'value', fill=True)\n",
    "else:\n",
    "    grid.map(sns.scatterplot, const.TPO, 'value')\n",
    "for i, ax in enumerate(grid.axes.flat): \n",
    "    ax.axline((0,0), slope=-1)\n",
    "    ax.set(ylabel='log intensity / sampling prop. ratio', xlabel = 'log sampling proportion')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
